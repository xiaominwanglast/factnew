#coding:utf-8
import time
from FrameRunner.FactorInit import NewFactorInit
from utils.TestInit import factor_encrypt_identity,factor_decrypt_identity
from utils.otherUtil import *
from bson.objectid import ObjectId
import re
import sys
import datetime
if sys.getdefaultencoding() != 'utf-8':
    reload(sys)
    sys.setdefaultencoding('utf-8')
class LakeFactor(NewFactorInit):
    def __init__(self, env, serial_no):
        super(LakeFactor,self).__init__(env, serial_no)
        self.APPList = []
        self.APP_Type_Detail_list = []
        self.sms_list = []
        self.sms_Org_Cnt = []
        self.match_list = ['贷', '呗', '分期', '捷信', '佰仟', '钱', '借', '白条', '金融', '现金', '信而富', '多享金汇',
                      '点点', '速之家', '考拉信用', '给你花', 'Array', '经银宝', '小树时代', '爱信管家', '九九聚财',
                      '先花一亿元', '嫦娥OA', '贝勒爷', '益秒到', '信用管家', '好收益', '闪电周转', '光速救急', '考拉信用',
                      '易生活钱包', '恒慧融', '支付无忧', '51人品', '趣头条', '拿去花', '极赞', '善心汇', '宜人理财',
                      '积木盒子', '趣店', '卡牛', '盒子支付', '瑞风聚财', '恒昌公司', '瑞银信', '51公积金', '即刷即付',
                      '国信证券', '平安陆金所', '友众信业', '拉卡拉', '提款宝', '萨摩耶金服', '给你花APP', '财付通', '豆豆花',
                      '玖富万卡', '豹子融', '信和汇金', '中腾信', '平安普惠', '51信用卡管家', '给你花', '易行通', '360你财富',
                      '玖富理财', '八八金', '信用管家', '宜信公司', '天下谷', '融360', '速批款', '读秒', '财富交流', '恒昌',
                      '闪银科技', '捷信公司', '小赢理财', '汇通信诚租赁', '普惠快捷', '信而富', '挖财', '钞市', '汇付天下',
                      '东方银谷', '惠今', '联动优势', '挖财网', '上海嘉银', '中安信业', '千百块', '先花一亿元', '花无缺',
                      '普惠快信', '买单侠', '誉用金服', '乐宝袋', '小信用', '玖富', '点融网', '小雨点', '玖富超能', '垫付宝',
                      '信融汇', '闪电周转', '江湖救急', '好人好信', '快乐达', '极速管家', '零花宝', '弘升资本', '融360',
                      '星海金服', '纷信信用', '吉林联通', '金泓兴盛', '麦子金服财富', '蛋花花', '新网银行', '花栗鼠', '币达财富',
                      '百利网', '永昌平台', '小象优品', '慧融宝', '菠萝消费', '提款宝', '康菲投资', '天天回收', '百亿金服']

        self.new_match_list=['贷', '呗', '分期', '捷信', '佰仟', '钱', '借', '白条', '金融', '现金', '信而富', '多享金汇', '点点',
                             '速之家', '信用', '现金', '给你花', 'Array', '经银宝', '小树时代', '爱信管家', '九九聚财', '先花一亿元',
                             '嫦娥OA', '贝勒爷', '益秒到', '信用管家', '好收益', '闪电周转', '光速救急', '考拉信用', '易生活钱包', '恒慧融',
                             '支付无忧', '51人品', '趣头条', '拿去花', '极赞', '善心汇', '宜人理财', '积木盒子', '趣店', '卡牛', '盒子支付',
                             '瑞风聚财', '恒昌公司', '瑞银信', '51公积金', '即刷即付', '国信证券', '平安陆金所', '友众信业', '拉卡拉',
                             '提款宝', '萨摩耶金服', '给你花APP', '财付通', '豆豆花', '玖富万卡', '豹子融', '信和汇金', '中腾信', '平安普惠',
                             '51信用卡管家', '给你花', '易行通', '360你财富', '玖富理财', '八八金', '信用管家', '宜信公司', '天下谷',
                             '融360', '速批款', '读秒', '财富交流', '恒昌', '闪银科技', '捷信公司', '小赢理财', '汇通信诚租赁', '普惠快捷',
                             '信而富', '挖财', '钞市', '汇付天下', '东方银谷', '惠今', '联动优势', '挖财网', '上海嘉银', '中安信业', '千百块',
                             '先花一亿元', '花无缺', '普惠快信', '买单侠', '誉用金服', '乐宝袋', '小信用', '玖富', '点融网', '小雨点',
                             '玖富超能', '垫付宝', '信融汇', '闪电周转', '江湖救急', '好人好信', '快乐达', '极速管家', '零花宝', '弘升资本',
                             '融360', '星海金服', '纷信信用', '吉林联通', '金泓兴盛', '麦子金服财富', '蛋花花', '新网银行', '花栗鼠', '币达财富',
                             '百利网', '永昌平台', '小象优品', '慧融宝', '菠萝消费', '提款宝', '康菲投资', '天天回收', '百亿金服']

        self.match_list_yuqi = ['逾期提醒', '已过最后还款日', '已过本期缴款日', '已经进入逾期阶段', '逾期提醒', '已逾期',
                           '未及时归还账单欠款', '欠款仍未处理', '已超过还款日', '已经逾期', '当期账单已逾期', '现已逾期',
                           '未处理欠款', '借款已逾期', '逾期欠款', '已经重度逾期', '已严重逾期', '已经逾期', '未归还', '缴清逾期款项',
                           '经提醒仍未处理', '分期严重逾期', '逾期罚金', '本期欠款']

        self.contactWord=[u"苹果易贷",u"佳泓速贷",u"猪猪侠",u"摩登时贷",u"幸运草",u"乐易花",u"蚂蚁口袋",u"月薪小卡",u"有用钱包",u"有钱花",u"七天花",
                     u"锦绣钱包",u"放心花",u"e花宝",u"财神白条",u"开心白卡",u"乐享白卡",u"速速钱包",u"融易花",u"期贷宝",u"宜人钱包",u"钱来来",
                     u"五斗米钱包",u"江湖应急",u"瓜子金服",u"金蟾花",u"及时贷",u"58钱站",u"乾坤易借",u"汇立付",u"小熊管家",u"即刻闪贷",u"51应急",
                     u"秒急管家",u"贷来花",u"借钱无忧",u"小呗乾庄",u"好享花",u"赛亚钱包",u"惠品钱包",u"小鹅钱柜",u"铭鑫钱包",u"魔方信业",u"盈易宝钱包",
                     u"善财宝",u"星子信用",u"百胜钱包"]

        self.keyword_app_list= [ "2345贷款王", "2345贷款王借钱", "2345贷款王-借钱借款", "360贷款导航", "360借条", "360借条(贷款，借钱，借贷)", "360借条分期贷款", "518贷", "51贷款",
                                 "51贷款超市-低息贷款借钱", "51短期贷", "51返呗", "51极速贷", "51极速贷分期贷款", "51借点花花", "51借款", "51借款贷款", "51借钱", "51借钱--信用贷款", "51卡宝",
                                 "51零用钱", "51人品", "51人品贷", "51闪贷-贷款借钱", "51闪电贷", "51速贷", "51速用", "51现金贷", "51信用贷", "51信用卡贷款", "51信用卡管家", "58借钱贷款",
                                 "666现金贷(借钱、分期、贷款)", "7贷分期", "91贷款", "91好借", "91好借极速版", "91极速贷", "91借款", "91借钱极速放款", "99贷", "e代付", "e合众", "e钱庄",
                                 "GO贷", "i贷贷款专业版", "i贷专业版", "i分期-贷款借款借钱", "i借款-现金信用卡分期", "i借钱-贷款借款分期", "i借钱-小额借贷款借款", "mo9信用钱包", "mo9信用钱包-借钱借款贷款",
                                 "mo9信用钱包-借钱借款借贷", "mo9信用钱包-借钱借款快速贷款", "U族", "爱贷借款", "爱卡贷", "爱钱进", "爱钱进理财", "爱尚分期购", "爱信", "爱信钱包", "安家趣花", "安心借条",
                                 "安逸花", "八借贷款", "八借贷款-网贷平台", "白白贷款", "白领借款", "白条", "百度钱包", "百度有钱", "百家贷", "百姓金融", "佰仟分期购", "包银消费", "宝贝钱袋", "宝鼎贷吧",
                                 "贝壳钱包", "本地钱柜", "便宜贷", "菠萝贷", "菠萝贷-贷款借钱", "不等贷", "布丁小贷", "布丁小贷贷款版", "布丁小贷极速版", "布丁小贷借钱版", "布丁信用", "布偶兔贷款", "财富U保",
                                 "财富贷", "财滚滚", "财金圈", "财鸟贷款", "财鸟贷款借钱", "财鸟借钱", "财神贷", "财神贷信用借款", "财神爷金服", "财神爷爷", "财小仙小额贷", "财主贷", "曹操贷",
                                 "曹操贷(贷款·借钱·借贷)", "曹操贷-贷款·借钱·借贷", "差钱吗", "差钱吗_手机贷款(借钱,借款,借贷)", "差钱吗_小额贷款", "差钱吗贷款", "钞市", "超好借贷款", "超人贷借款", "超速贷",
                                 "潮贷", "潮贷-大学生借款", "辰安现金贷", "城市贷", "城市贷(贷款·借钱)", "赤兔宝", "创宝分期", "纯信贷", "村分期", "达飞云贷", "打个借条", "打个借条--手机贷款", "打工贷",
                                 "大额贷款", "大粒贷", "大小贷", "大小贷贷款借款", "大小贷-贷款借款", "大小贷-贷款借钱借贷", "贷吧", "贷呗", "贷贷看", "贷贷款", "贷贷款（贷款.借钱.借贷）", "贷贷款-贷款借款",
                                 "贷点钱借款", "贷款", "贷款123", "贷款123-借款分期", "贷款123-借钱借款", "贷款60秒", "贷款60秒-借钱", "贷款APP", "贷款APP-借款借钱借贷", "贷款APP-快速借钱借贷",
                                 "贷款APP秒速借钱", "贷款宝", "贷款宝借款", "贷款宝借款-小额贷款", "贷款宝借款小额借贷版", "贷款超市", "贷款大师-快速现金借款", "贷款-贷款贷款大小贷", "贷款-贷款啦", "贷款管家",
                                 "贷款黑卡", "贷款机", "贷款-借钱宝", "贷款快", "贷款快办", "贷款啦", "贷款秘籍", "贷款平台", "贷款钱包", "贷款钱包极速版", "贷款钱包-极速放款", "贷款轻松筹", "贷款-闪银",
                                 "贷款神器", "贷款-速贷之家", "贷款王", "贷款王（2分钟放款）", "贷款王（借钱.借贷.借款）", "贷款王_手机贷款（借钱,借款,借贷）", "贷款王极速版", "贷款王借钱借款", "贷款王-现金借钱平台",
                                 "贷款侠借款", "贷款侠-借款贷款", "贷款一点通", "贷款周转管家", "贷款助手", "贷款助手-借钱借款分期", "贷嘛", "贷嘛极速审核版", "贷你嗨", "贷钱易", "贷钱走", "贷钱走借款",
                                 "贷上钱", "贷上钱包", "贷上钱贷款-现金借款", "贷上钱借款-分期贷款", "贷先生-贷款分期", "贷先生-年轻人贷款分期", "嘀嗒速贷", "滴士分期", "第一贷款", "第一贷款借款", "点点钱包",
                                 "点融借贷", "电兔贷款", "垫付宝", "屌丝贷", "叮当钱包", "叮咚钱包", "鼎及贷", "兜有钱", "豆豆花", "豆豆钱", "豆豆钱包", "读秒钱包", "短借宝", "多多付钱包", "多享金汇",
                                 "发薪贷", "发薪贷-贷款借钱网贷", "发薪贷借钱贷款", "发薪贷-借钱贷款", "发薪贷-借钱贷款网贷", "发薪贷小额贷款", "番茄贷款", "房速贷", "放心花", "飞贷", "飞快贷", "飞鸟贷",
                                 "飞钱支付", "飞鼠贷", "飞速贷款", "飞鱼贷款", "分美工薪版", "分秒贷-快速贷款", "分期呗", "分期贷", "分期贷贷款", "分期贷贷款(贷款·借贷)", "分期贷款", "分期贷款-小额借贷钱包",
                                 "分期贷款-征信贷款借钱包", "分期购", "分期管家", "分期借贷小额贷款", "分期借钱贷款", "分期乐", "分期钱包贷款", "蜂易贷", "福鑫贷款", "高校贷款", "给你花", "给你花呗",
                                 "给你花贷款", "给你花极速版", "给你用", "工银广东e贷通", "工资钱包", "功夫贷", "功夫贷贷款", "功夫贷－贷款借钱借款", "功夫贷借款", "共享现金", "瓜牛钱包", "光速贷", "光速贷款",
                                 "光速贷款-贷款借款分期", "光速借款", "国美金融", "国智社保贷", "还呗", "还还", "还借钱", "还卡超人", "还款易", "好哒白条", "好贷", "好贷贷款", "好贷款", "好贷款-借贷神器",
                                 "好付钱包", "好好贷", "好借好还", "好借钱", "好钱包", "好人好信", "好易借", "好账付钱包", "合贷网", "合花易贷", "合利宝钱包", "和付", "和信贷", "和信借款", "赫美易贷",
                                 "嗨呗钱包", "嗨贷款", "嗨付", "嗨皮贷", "嗨钱", "嗨钱包", "嗨钱网", "恒易贷", "厚钱包", "胡桃钱包", "花呗借贷", "花呗钱包", "花点借款", "花花贷", "花花零用钱",
                                 "花花钱包", "花啦花啦", "花乐宝", "花钱无忧", "花无缺大学贷", "花无缺借款", "花无缺上班贷", "花无忧", "花薪", "花薪闪借", "华瑞借贷", "华为钱包", "惠贷款-借款借钱", "惠花",
                                 "惠借宝", "惠借贷款", "火车快贷", "火贷款手机借钱", "及贷", "及钱花", "及时贷", "及时贷-信用贷款", "吉大贷", "极速贷", "极速贷工薪借贷", "极速贷款", "极速贷款-借钱",
                                 "极速贷款-借钱借款分期", "极速贷款-闪电手机借钱", "极速贷款小额借款", "极速借贷-贷款借款分期", "极速借款", "极速借款-小额现金贷款", "极速借钱", "极速钱包", "极速现金侠", "极速信用贷款",
                                 "即刻", "即刻贷", "即刻贷-贷款借款", "即刻贷借钱贷款", "即有分期", "即有分期无效版", "急借通", "急速贷", "急速贷款-借款现金分期信用卡", "急用钱", "急用钱ATM", "急用钱贷款",
                                 "几千块", "几千块—贷款借钱", "家分期优选", "嘉卡贷", "简单贷借钱", "简单贷款", "简单借款", "简单金融", "简借贷款", "简借贷款-借钱", "简借贷款-手机贷款", "简融现金贷款王",
                                 "简易贷", "江湖救急", "捷现贷", "捷信福贷", "捷信福袋", "捷信捷现贷", "捷信金融", "借吧快速借款贷款", "借吧微贷", "借吧易贷", "借呗花钱", "借财童子", "借大师", "借贷宝",
                                 "借贷宝典", "借贷呗", "借贷快速贷款", "借贷零门槛", "借贷钱包-贷款借款现金分期", "借贷钱-贷款", "借贷侠", "借得到", "借得快", "借的快", "借点花呗-信用贷款", "借点钱",
                                 "借点钱贷款", "借点钱贷款借钱", "借点用", "借点用贷款", "借点用-贷款借钱借款", "借乎-现金贷款借钱", "借乎-现金贷款手机贷", "借花花贷款借钱借贷", "借花花贷款借钱网贷", "借花花借贷",
                                 "借花花-借款送免息券", "借花花-借钱贷款", "借花花钱包", "借几天", "借借钱-借款贷款", "借客", "借款", "借款宝-贷款借钱分期", "借款宝-现金借贷款借钱", "借款大师", "借款贷款借钱",
                                 "借款花呗", "借款借钱贷款钱包", "借款王", "借款王贷款", "借款王-极速手机贷款", "借款王极速小额贷款", "借款王-借款贷款", "借款王-借钱贷款", "借款王-借钱贷款分期", "借款王小额贷款",
                                 "借款专家", "借款专家-贷款信用分期", "借款专家-借钱信用分期", "借乐花", "借了吗", "借了吗贷款", "借你花花", "借你钱", "借钱", "借钱吧", "借钱宝", "借钱宝分期贷款王",
                                 "借钱-贷款宝", "借钱花", "借钱花呗", "借钱花贷款", "借钱花贷款（贷款·借贷）", "借钱花-分期现金借款", "借钱花手机贷", "借钱快", "借钱吗", "借钱手机现金分期贷款", "借钱王借款",
                                 "借钱易-手机借钱软件", "借钱用", "借钱用-信用贷款分期", "借顺贷", "借速贷", "借现金", "借小钱", "借易贷", "借易得", "借有道", "今金贷", "今日现金", "金博士钱包", "金蝉贷",
                                 "金豆分期", "金豆粒", "金控钱包", "金联储", "金牛贷", "金融超市", "京东金融", "九秒贷", "久融贷", "久融金融", "玖财通", "玖富钱包", "玖富万卡", "救急钱包", "就要贷",
                                 "就要贷贷", "桔子分期", "聚宝贷", "聚财村", "聚好贷-贷款借钱", "聚有钱", "卡卡贷", "卡卡借", "卡卡借贷通", "卡乐贷", "卡牛贷款", "开始钱包", "开心e贷", "开心钱包",
                                 "开薪贷", "靠谱分期贷", "靠谱鸟贷款", "口袋钱包", "口子超人", "快车小贷", "快贷", "快贷（贷款.借钱.借贷）", "快贷贷款", "快贷－放款速达", "快分期", "快捷贷", "快借呗-手机贷款",
                                 "快借到", "快借钱", "快金", "快客贷", "快快贷", "快来贷", "快乐e贷", "快乐钱包", "快钱贷款-小额借贷借钱借款现金分期", "快钱钱包", "快闪现金", "快手贷-贷款借款分期", "快速贷",
                                 "快速贷款", "快速借款", "快速借款借钱", "快易贷", "快易花", "快易花极速版", "拉比鸟钱包", "拉卡拉", "蜡笔分期", "来贷呗", "来分期", "来借", "来借贷款", "来借钱", "来钱宝",
                                 "蓝领贷", "蓝领钱包", "蓝莓钱包", "蓝薪卡", "老司机借钱", "乐宝袋", "乐贷款", "乐信分期", "丽人荟", "靓号贷", "猎豹极速贷", "猎融贷款", "灵云速贷", "灵云速贷-极速借款",
                                 "凌波微贷", "零零期分期", "零零期分期贷款", "零钱罐", "零钱淘夺宝", "零用钱", "零用钱包", "绿化贷", "绿洲闪贷", "麻辣小额贷款", "麻利借", "马贷来了", "马力钱包", "马上贷",
                                 "马上分期", "马上借", "马上借钱", "马上金融", "马上钱包", "蚂蚁花呗", "蚂蚁借呗", "蚂蚁借款", "蚂蚁小花钱包", "蚂蚁小微贷", "蚂蚁信贷", "蚂蚁信用贷", "蚂蚁易贷", "买单侠",
                                 "买单侠分期", "买买钱包", "麦贷客", "麦粒贷", "麦麦提借款", "麦芽贷", "麦芽贷极速版", "麦芽普惠", "猫粒贷贷款", "猫小贷", "么么贷", "么么钱包", "美借", "米筹金服",
                                 "米到钱包", "米发钱包", "米咖贷", "米乐贷", "米粒白条", "米米贷", "米小钱", "蜜蜂有钱", "免费借钱", "秒白条", "秒贷", "秒贷（贷款.借贷.网贷）", "秒贷（贷款.借钱.借贷）",
                                 "秒贷金融", "秒贷款", "秒分贷", "秒分钱包", "秒分钱包-专业版", "秒分商城", "秒借", "秒借-极速小额借贷", "秒借款", "秒借款-贷款借钱分期", "秒借钱", "秒借-信用贷款借款",
                                 "秒秒通", "秒批", "秒批贷款", "秒钱", "秒速贷款借钱", "秒下款", "秒下款极速版", "民生易贷", "民信贷", "名校贷", "名校贷白领版", "名校贷白领版分期贷款", "名校贷贷款-贷款分期借款",
                                 "魔法钱包", "魔法现金", "魔借", "莫愁花", "莫愁花极速版", "拿钱宝", "拿下分期", "拿下钱包", "哪里借", "哪里借贷款", "南瓜快贷", "南瓜马车善贷", "能借", "你我贷",
                                 "你我贷借款", "你我贷理财", "你我金融", "你我金融-贷款投资", "你我金融-借款理财一账通", "你我金融-借款投资", "你我云贷", "牛呗", "牛呗借款借钱", "牛呗借钱贷款", "牛呗借钱借款",
                                 "牛牛借吧", "农村小额贷款", "暖手好贷", "暖薪贷", "诺秒贷", "啪啪钱包", "啪啪钱包贷款", "啪啪钱包-简单借钱", "啪啪钱包-简单借钱贷款", "拍分期", "拍拍贷借款",
                                 "拍拍贷借款(贷款·借钱)", "拍拍贷借款(贷款·借钱）", "拍拍贷借款(贷款·借钱·借贷)", "拍拍贷借款(贷款·借钱·借贷）", "拍拍贷借款-小额贷款", "拍拍贷款王", "拍拍贷理财（理财·投资·赚钱）",
                                 "平安i贷", "平安花呗极速借贷", "平安普惠", "平安普惠i贷极速版", "平行空间(原双开大师)", "迫不及贷", "普惠贷", "普惠借贷", "奇速贷", "祺天优贷", "启发分期", "千百块", "千金贷",
                                 "仟易贷", "钱包贷", "钱包贷—贷款借贷借钱神器", "钱包管家", "钱宝", "钱大掌柜", "钱贷-贷款借款分期", "钱袋", "钱袋贷小额借款", "钱到", "钱到到分期",
                                 "钱到到分期-借钱贷款查征信的小贷信用卡", "钱到位", "钱盾", "钱多多", "钱多好借", "钱花花", "钱急送", "钱借到", "钱咖", "钱妈妈", "钱妈妈贷款", "钱米", "钱米钱包", "钱牛牛",
                                 "钱牛速贷", "钱钱e贷", "钱钱贷", "钱升钱", "钱嗖嗖", "钱相随", "钱箱借贷", "钱有路", "钱鱼借", "钱鱼借贷", "钱站", "乾道金融", "亲亲小贷", "亲亲小贷（借钱借款贷款）",
                                 "亲亲小贷借款", "亲亲小贷-借钱贷款", "亲亲小贷-借钱借款贷款", "青港货运智能调度系统", "青年钱包", "青年钱包分期贷款", "轻松有钱", "去哪贷", "去哪儿借-贷款信息平台", "去哪儿借-秒放款",
                                 "趣分期", "趣还钱", "趣救急", "趣美文分享神器", "全能借款", "全薪时贷", "缺钱花", "缺钱么", "缺钱么极速版", "缺钱用", "人品贷", "人人爱家金融", "人人贷WE理财", "人人贷借款",
                                 "人人花", "人人花-小额贷款", "人人借款", "人人借钱", "任我贷", "任性贷-借钱贷款", "任性付", "任性花", "任逸花", "容易贷", "容易贷信用贷款", "容易借", "容易借钱", "榕树",
                                 "融360", "融360贷款", "融易贷", "如来贷", "如来贷(贷款·借钱·借贷)", "如意借", "三分钟周转", "三文钱", "森昊好时贷", "闪贷", "闪贷-贷款借款分期", "闪贷侠",
                                 "闪贷侠极速版", "闪电白领", "闪电宝", "闪电贷", "闪电贷款", "闪电分期", "闪电借贷", "闪电借款", "闪电借款贷款", "闪电借款极速版", "闪电借钱花", "闪电猫", "闪电小贷",
                                 "闪电周转", "闪借款", "闪金贷", "闪钱包", "闪速贷", "闪银", "闪银大额贷", "闪银-贷款借钱", "闪银—贷款借钱", "闪银极速贷", "闪银借款", "闪银-借款", "闪银奇异", "商贷通",
                                 "上海小额贷款", "奢分期", "社保贷", "社保贷款", "身份证贷款", "身份证贷款宝", "身份证贷款-小额借贷", "身份证借贷", "身份证借款", "身份证借钱", "深圳e巴士", "神灯小贷",
                                 "神速借款", "时贷", "实名贷", "世海信贷", "手机贷", "手机贷（贷款.借钱.分期）", "手机贷（贷款.借钱.借款）", "手机贷-贷款借款APP", "手机贷-贷款借钱", "手机贷-贷款借钱分期",
                                 "手机贷-贷款借钱借款", "手机贷借款", "手机贷经典版", "手机贷款", "手机贷款(贷款.借钱.分期)", "手机借钱", "手机借钱-信用贷款分期", "手机速借", "手机微贷款", "手机现金贷", "舒心微贷",
                                 "刷脸贷", "水象分期", "水象借点花", "水象借点花极速版", "顺借", "瞬借", "松鼠贷", "松鼠金融借款", "宋江贷", "搜狗手机助手（手机贷）", "搜狗手机助手（信而富）",
                                 "搜狗手机助手（悠米闪借）", "搜易借", "苏宁金融", "速贷", "速贷360", "速贷360-贷款借钱分期", "速贷宝典", "速贷宝借款", "速贷贷款", "速贷无忧", "速贷现金借款贷款", "速贷之家",
                                 "速贷之家贷款", "速贷之家-贷款借钱", "速贷之家-贷款借钱分期", "速贷之家-手机贷款借钱分期", "速借钱", "速可贷", "速来钱", "速米", "速钱", "随便花", "随分期", "随你花", "随时贷",
                                 "随手借", "随我花", "随心贷", "随芯用", "随指贷", "太好借钱", "淘分期贷款", "淘钱宝", "淘钱宝（贷款.借钱）", "淘钱宝（贷款.借钱.借款）", "淘钱宝-贷款", "提钱乐", "天神贷",
                                 "天天贷-贷款攻略", "天天分期", "通天贷", "同牛贷", "同学贷", "铜钱贷", "投哪好贷", "挖财宝", "挖财钱管家", "玩卡金融联盟", "万达贷", "万卡商城", "网贷钱包", "网贷钱包-贷款",
                                 "网贷小猫", "微贷", "微贷金融", "微贷款", "微贷网", "微当借钱", "微当钱包", "微粒贷", "微粒贷-手机贷款", "微粒贷-小额贷款", "微盟贷款王", "微盟贷款王pl", "微钱贷",
                                 "微速贷", "稳下款", "我来贷", "我信100", "我要借款", "沃钱包", "无忧借条", "五一钱包", "悟空贷", "希财贷款", "希财贷款(申请端)", "希财网贷款申请端", "虾球借钱",
                                 "虾球借钱-贷款借款", "虾球借钱-快速贷款", "虾球借钱-快速现金贷款", "下钱快", "先花花", "先花钱", "先花一亿元", "现金e贷", "现金巴士", "现金巴士-助手", "现金白卡", "现金宝",
                                 "现金超人", "现金超市", "现金贷", "现金贷贷款", "现金贷借款", "现金贷款", "现金贷款-小额贷款", "现金贷款-小额借贷钱包", "现金贷款-小额借钱包贷款", "现金贷平台", "现金贷-手机贷",
                                 "现金贷-小额贷款", "现金贷信用卡借款", "现金袋-贷款借款信用钱包", "现金飞贷", "现金黑卡", "现金黑卡-小额贷款借款", "现金红包", "现金借贷", "现金借贷平台", "现金借款", "现金借钱",
                                 "现金卡", "现金卡贷款", "现金快车", "现金快贷", "现金快贷手机借款", "现金秒贷", "现金秒贷款", "现金奶牛", "现金牛", "现金钱包", "现金钱包贷", "现金钱包-分期贷款攻略", "现金钱袋",
                                 "现金闪贷", "现金速递", "现金速借", "现金微贷", "现金侠", "现金侠小额贷款借钱", "现金易", "现金易贷", "现金易借", "现金驿站", "现金在线", "享宇钱包", "向钱贷", "小草金融",
                                 "小葱钱包", "小贷插件", "小贷大全", "小额宝", "小额贷款", "小额贷款管家", "小额贷款网", "小额极速贷", "小额借贷", "小额钱袋", "小额闪电贷款借款", "小额现金贷", "小额现金贷款借款",
                                 "小好用钱", "小狐分期", "小花钱包", "小蓝钱包", "小灵通钱包", "小马金融", "小蚂蚁贷款", "小米贷款", "小米金服安全组件", "小米金融", "小牛逗士", "小牛闪贷", "小牛速贷",
                                 "小胖钱包", "小期贷", "小企鹅乐园", "小企额", "小钱", "小钱贷", "小钱贷款", "小钱贷款-借钱借款分期", "小钱-小额贷款借钱", "小钱-小额借款", "小瑞快贷", "小微借款",
                                 "小微借款-极速版", "小伍钱包", "小虾借钱", "小象优品", "小信用", "小信用-贷款借贷", "小信用-快贷贷款借贷", "小赢卡贷", "小赢卡贷-还信用卡", "小雨点网贷", "小资钱包", "笑脸金融",
                                 "新浪分期", "新浪有借", "新钱贷", "新新贷理财", "新一贷", "新易贷海贝", "新易贷微贷款", "薪动钱包", "薪火分享神器", "薪借贷借款", "鑫瑞金服", "信呗", "信而富", "信而富钱包",
                                 "信美", "信美分期", "信融财富", "信闪贷", "信石贷", "信易闪借", "信用白条", "信用贷", "信用贷借款", "信用贷款", "信用付", "信用管家-简单借钱贷款", "信用管家-征信查询贷款借钱",
                                 "信用管家－征信贷款借钱", "信用管家-征信借贷钱包", "信用管家-征信借钱", "信用管家－征信借钱贷款", "信用管家-征信钱包", "信用花", "信用借贷", "信用借贷分期贷款", "信用借贷小额贷款",
                                 "信用卡办理", "信用卡贷款", "信用卡贷款借款", "信用卡贷款-借款借钱分期", "信用卡借款", "信用雷达", "信用钱包", "信用钱包贷款", "信用钱包-贷款分期", "信用钱包-贷款分期白条",
                                 "信用钱包-贷款易", "星星借款", "星星钱袋", "星用卡", "星悦贷", "杏仁钱包", "杏仁钱包-贷款借钱的信用钱包", "幸福钱包现金借款", "学贷宝", "雪中金融", "迅借贷", "亚热贷", "颜值贷",
                                 "阳光易贷", "幺幺玖钱包", "摇钱罐", "要借钱APP", "一刻千金", "一秒贷款", "一秒借款", "一秒速贷", "一信贷", "一证贷", "依米花", "依米钱包", "壹佰块兼职", "壹号钱包",
                                 "壹钱包", "壹有钱", "宜借贷款", "宜聚网", "宜聚网理财", "宜人贷借款", "宜人贷借款（信用卡极速贷款）", "宜人理财", "宜信金服", "移动金融服务平台", "移动钱包", "移动手机贷", "易贷",
                                 "易贷款", "易分期", "易借宝", "易借贷款", "易借金", "易快借", "易莱借", "易通贷", "易鑫车贷", "翼龙贷", "翼龙贷借款", "银嘉钱包众赢版", "银钱铺子", "银通金融", "银信富",
                                 "银信小贷", "应花分期", "应急包", "应急贷", "应急贷款", "应急贷款-闪电手机借贷", "应急钱包", "应急通", "用钱宝", "用钱管家-贷款借款分期", "用钱管家-借贷款借款借钱信用卡", "用钱王",
                                 "优分期", "优借", "优啦金融", "悠米钱包", "悠米闪借", "悠融借贷", "邮乐金融", "油菜花", "游戏闪贷", "游戏现金贷", "友借", "有贝钱袋", "有贝钱袋极速版", "有借贷款",
                                 "有品钱包", "有钱宝", "有钱贷极速借款", "有钱嗨", "有钱用", "有氧金融", "有用分期", "有用无忧", "有用折扣", "有鱼贷款", "有鱼贷款-借贷.借款.借钱.网贷.分期", "有鱼借款",
                                 "佑米金融", "柚钱花", "愚人贷", "预支卡", "元百百", "员工贷", "原子贷", "月光蓝卡", "月光侠", "月光族", "云白条", "云分期", "云投贷", "在线借款", "赞分期",
                                 "招联好期贷", "招联金融", "找贝", "找钱花", "征信贷款工具", "征信钱包", "正好花", "芝麻贷", "芝麻好贷", "芝麻借款", "芝麻借钱", "芝麻金融", "芝麻精英", "芝麻钱包",
                                 "芝麻现金", "芝麻小金", "芝麻小钱", "芝麻信用贷", "芝麻信用卡与贷款", "值得借", "值得借贷款", "值得借-贷款借钱借款", "指尖贷", "指尖钱包", "中安信业贷款", "中腾信", "中邮钱包",
                                 "众可贷分期", "众鑫玩卡", "周贷宝", "周周贷", "珠宝贷", "诸葛借呗", "诸葛钱包", "诸葛钱包贷款借钱借款", "诸葛钱包-贷款借钱借款", "诸葛钱包手机贷款", "猪宝钱包", "纵横商户钱包",
                                 "应急借款", "闪借", "借款宝", "51小额速借", "闪垫钱急送", "海洋分期", "晋商贷", "借款App", "乐富宝", "大学生贷款专业版", "黄金钱包", "易贷款(贷款·借款·借钱)",
                                 "分期贷款－小额借钱借贷", "诺诺镑客", "乐金所", "壹佰金融", "有鱼金融", "超速贷款", "会员宝秒到版", "电兔借钱", "搜狗手机助手（现金借款）", "钱速来", "速拿钱", "友信信贷",
                                 "乐花花分期", "钱包闪贷", "简单借款现金贷款借钱", "借呗", "百贷纵横", "随时借", "贷贷花", "简借贷款-小额贷款", "简借贷款-极速借钱", "小额借钱贷款", "汇贷款",
                                 "拍拍贷理财(理财·投资·赚钱)", "91钱", "草根钱包", "大额秒贷", "佰仟分期", "名校贷公益", "现金之家", "搜狗手机助手（钱急送）", "借款-快速借款", "贷款-贷款贷款鸟", "手机借款",
                                 "银信分期", "小额贷款王", "贷款侠", "人人贷理财", "小信用(借钱.贷款.借款)", "欢旅金服", "牛呗借钱借款-贷款助手", "奇速贷款", "车主白条", "好借钱-贷款借贷借款", "快贷借款下钱快",
                                 "一点借钱", "贷款-极速借条", "指还王", "微融", "多借", "极速借条", "帮帮钱包", "闪电贷款王", "速领薪", "信用贷款借款信用钱包", "浪莎金融", "及贷好借版", "小微钱包", "借钱帮",
                                 "财神钱庄", "金牛贷贷款", "手机贷款-来钱快", "速贷无忧-手机快速贷款", "借款屋", "财鸟贷款(借钱.借款.借贷)", "萌小贷", "秒借款快钱版", "速贷现金贷款", "帮你借", "嘀嗒贷款",
                                 "头号钱庄", "贷款-贷款-极速贷款", "贷款贷款", "手机微贷", "小额手机借款", "实时贷现金借款版", "好又贷借款", "闪电借款app", "贷钱走-闪电借款", "钱宝贷", "来借钱极速版",
                                 "借点钱极速版", "现金极速贷", "借花花极速贷款", "贷小强", "惠农时贷业务系统", "诸葛钱包-手机贷", "人人闪贷", "亿家分期", "差钱吗_手机贷款(借钱,借款,借贷,小贷,快贷)",
                                 "老哥帮-小额贷款借款", "小星借款", "手机借款-小额借贷款借钱现金分期", "钱大侠", "月光足", "嗨钱贷款", "i分期-小额贷款借贷借钱现金贷", "平安普惠i贷贷款", "小牛闪贷-小额现金借款贷款",
                                 "信金管家贷款", "趣借钱", "信通袋分期", "有元贷", "益秒到", "信用卡贷", "榕树贷款", "速米袋", "91借钱", "速贷展业", "贷款快-贷款贷款", "借啊", "正好分期", "挖财猫",
                                 "现金贷款快速借款", "淘钱宝贷款", "贷款助手分期借款版", "花金宝", "e钱包", "蓝领贷极速版", "小钱好借-贷款借款", "51闪现", "借么", "银商钱包", "超级钱包", "任信用", "宜分期",
                                 "手机贷款-小额贷款", "微贷钱包", "小额贷款钱包", "小意思", "任我花", "向上钱贷款", "拍拍贷理财-投资赚钱", "现金分期", "微盟贷款王贷款版", "现金无忧", "借点钱借钱", "白领钱站",
                                 "信e家", "轻松借", "任性贷", "点点速借", "小钱借钱极速版", "同城贷款-快速借款", "贝壳信用", "借款宝借钱", "贷款贷款快", "现金超人小额版", "迪迪小额贷", "广源小贷", "现金飞速达",
                                 "微当贷款", "钱米钱包贷款", "五叶鱼借贷导航", "贝学分期", "用钱管家", "今借到", "唯品金融", "借贷花呗", "现金白卡王", "借了吗借款", "应急贷款王", "借钱-手机现金分期贷款",
                                 "小树普惠", "地瓜金融", "马上消费金融贷款", "拍拍贷理财", "7贷助手", "借条宝", "现金快贷高额版", "借款白条", "享借钱", "贷嘛-贷款借钱借款", "卡宜贷", "银盛通", "及时雨贷款",
                                 "现金转转", "实时贷", "聪明钱包", "现金快速贷款", "钱呗", "360借条-贷款分期借款", "神奇钱包", "壹贰钱包", "闪贷超人", "土豆用钱", "极速贷款王", "征信司借款借贷", "超光速钱包",
                                 "嘉英贷", "征信贷款", "随手贷", "赞时贷", "信呗-分期借贷款", "信用管家-借钱贷款", "盈盈有钱", "招米贷", "易融贷", "网贷之家", "借呗花呗贷款", "即有钱包", "好期贷",
                                 "贝勒爷-小额贷款", "i贷款-借钱借贷小额信用卡分期", "随便借", "融亿花", "立马有钱", "货融贷", "今日借款-快速贷款借钱", "速借宝", "青年黑卡", "魔幻农庄", "贝米钱包", "温商贷理财",
                                 "中证宝", "一亩三分地", "卡牛借钱", "幸福钱包", "好快信", "借贷钱包-小额贷款借款借钱分期信用", "蚂蚁贷款", "派派钱包", "51公积金借款", "一元乐购（官方）", "畅快贷", "钱师爷",
                                 "现金魔盒", "打个借条贷款好借钱", "秒必贷", "闪电借款极速贷款", "钱速贷", "要钱花", "贷款之家", "快速贷款-借钱", "快钱借贷", "小金借贷", "融易借", "贷款贷款贷款淘钱宝",
                                 "免费借款", "钱有路贷款", "速援贷", "你我金融-借款", "分期贷借钱", "速贷之家-手机贷款借款借钱", "付赢钱包", "亲亲小贷-借钱借款", "借钱白条", "麦芽分期贷", "百贷宝", "贷钱快借款",
                                 "小乔借款", "现金小额贷款", "51小额贷款助手", "财小仙贷款", "融易贷钱", "急速贷款", "有钱花", "现金贷款借钱-小额借贷借款信用卡", "朱八借", "贝勒爷小额贷款", "贷款帮",
                                 "贝壳钱包-极速借款", "掌富贷", "快捷钱包", "小鱼快贷", "捷信福贷5000", "极速手机贷款", "信用借款", "借款呗-小额贷款", "现金贷借钱", "趣提钱", "现金侠极速版", "专科贷",
                                 "91社保贷款", "借钱用—应用宝KA—CPD投放", "王者娱乐", "萌萌贷", "秒还卡", "云钱借款", "新浪有还", "速贷360分期贷款", "借点钱花", "出钱宝", "有借宝", "享于钱包贷款",
                                 "贝壳钱包借钱", "99易借贷款助手", "借乎", "云钱花", "鲢鱼贷款", "水象分期极速版", "随意借", "全能借条", "乐开花", "云科贷", "快闪卡贷", "融易来", "秒借花贝", "花呗借钱",
                                 "任性贷借款", "量子借款", "美威贷款", "考拉贷款分期借钱", "有借", "优贷宝", "标越车贷安", "速贷现金贷款借款", "普惠快信", "惠借宝贷款", "借花花", "贷博士", "花钱无忧借钱贷款",
                                 "芒果钱包", "容易付聚合版", "够范分期", "省省钱包", "趣有钱借钱借款", "花呗贷款", "车贷贷", "花呗白条", "魔域口袋版", "借款超人", "现金的士", "狼人钱包", "幸福钱包贷款",
                                 "小马快借-贷款网贷借钱分期", "借吧钱包", "贷钱走借款-小额贷款", "不二钱庄", "借贷王", "现金直通车", "现金白条", "宜人贷借款贷款平台", "马上贷款", "现金超人-快速版", "信用管家借钱贷款",
                                 "发薪贷款", "零零期分期小额贷款", "无屏助手", "万盈金融", "666贷款王", "火速贷款APP", "51返呗-信用卡借钱贷款分期", "极闪贷", "闪电还", "闪电极速贷", "叮铃贷款", "大神贷",
                                 "果然有钱", "贷款哒", "贷款乐", "贷款口子", "贷款宝-低息分期借钱快", "财来贷款", "现金帮", "安全贷", "用钱呗", "秒借贷", "美利钱包", "贷小钱", "借款无忧", "五一钱包-借钱吧",
                                 "千千速贷", "捷信大福贷", "给你花呗现金宝", "信用卡还呗", "盛迪嘉钱包", "用钱宝宝", "用小钱", "利信快捷金融", "分期借贷", "还乐贷款", "贝壳钱包借款", "借的快贷款", "贷款花",
                                 "借款钱包", "订货宝", "老哥帮贷款", "拉卡拉贷款", "捷信分期", "58金融消费贷", "速贷熊", "蚂蚁微贷网", "魔借精英版", "要借钱网", "贷钱快", "超急贷", "小钱钱包", "51借你钱",
                                 "麦麦借款", "微微贷", "成长钱包", "瓜牛分期", "贷款大全", "来分期贷款", "分期乐贷款", "现金分期贷", "芝麻分期信用贷款", "快借速贷", "易借钱", "保险E家", "钱呗钱包",
                                 "银信金服", "搜狗手机助手（好易借）", "小贷鼠", "贷款侠-借钱借款", "闪电袋子", "贷款记账", "卡卡借贷款借钱", "红人贷", "给你花借钱", "51返呗-信用卡贷款", "口子来了小额贷款",
                                 "来应急", "我来贷银行版", "速秒贷", "贷贷红", "讯闪贷", "融易借钱", "买金呗", "赏鱼袋", "300快借贷", "贝勒爷贷款", "网易金融", "龙卡快贷", "逗米贷款", "银谷在线借款",
                                 "快贷呗", "柠檬钱包", "白领贷", "袋鼠钱包", "微耳钱包", "速贷钱包", "水稻现金", "秒易贷", "现金借贷宝闪电贷", "小宝钱袋", "速来贷", "51钱包", "借钱信用钱包", "有钱借",
                                 "帮忙借钱", "秒来款", "全民钱包", "点融秒借", "牛呗贷款", "现金极速达", "现金侠借款", "飞鸟贷-手机贷款现金贷", "财小仙", "车车车贷", "神州车闪贷", "用钱呗贷款-现金借款",
                                 "秒到钱", "芝麻借条", "融易来借钱贷款", "分期族", "分期钱包", "信分期", "益秒借", "贷钱快-借钱贷款", "招联微贷", "急速秒贷", "火箭借款借钱", "秒贷宝", "亿金贷",
                                 "卡卡借现金贷", "贷款快借钱借款", "掌上平安", "周转管家贷款", "乐盈宝", "够花", "现金小熊", "正好贷", "贷款钱包-急速放款", "中原消费金融", "现金借款小额贷款软件", "借你花",
                                 "袋鼠助贷", "平安优联", "借钱手机贷款", "花钱月上", "秒借贷款", "亿宝贷借款", "欢乐贷", "百度手机助手(现金卡)", "快贏优贷", "微利贷款", "借借钱", "乐先花", "京意借",
                                 "呼呼借", "汇邦小贷", "现金米", "千八百", "同城宜贷", "钱包超人", "桔子快贷", "磐多拉信用", "青年贷款钱包", "飞鼠贷-借钱借款贷款", "惠享借", "小诸葛金服", "小信用-借钱贷款借贷",
                                 "飞鸟贷-借钱贷款手机贷", "大路钱包-贷款借钱", "即刻贷-借钱贷款", "十里借钱", "芝麻贷款", "信用卡贷款现金借钱", "汇融钱包", "花点财", "钱夹子", "贷款分期管家", "快花钱包",
                                 "现金卡贷", "月光白卡", "现金白卡宝", "借花花-手机快速贷款借钱借贷", "51返呗-借钱贷款app", "快借呗", "指尖钱庄", "领英贷", "极光融", "小易贷", "翼钱包", "贷款贷款-发薪贷",
                                 "信用猫", "卡农", "山贷王", "钱贝", "小和宝", "钱包信用", "借吧-小额贷款工具", "兴业借贷", "白花花", "身份证借贷款", "卡神网", "信贷员抢单宝", "老哥帮-小额借款",
                                 "借吧微贷网", "361汇金", "马上用钱", "金蛋分期", "广州e贷", "贝勒爷-急速贷款", "小钱贷款借钱", "轻借", "干脆贷", "秒到小额", "引航贷", "钱万万贷款", "小花借钱",
                                 "唯美分期贷款", "布丁小贷-手机贷款", "好收钱", "新浪有借-小额贷款", "小贷精灵", "友借有还", "倍有钱", "极速借贷款", "花赢宝", "水滴借款钱包", "1小时借款", "借款记账",
                                 "及时雨借款", "易贷大师", "新易贷", "钱贝街", "乐享贷", "壹现金", "借贷分期管家", "借吧", "借贷快", "新浪有借-小额贷款借款借钱", "飞豹贷", "易进金", "闪银信用管家",
                                 "蜂投借款", "信用钱包-急速放款", "手机贷款王", "哈喽贷", "天神小贷", "我去贷", "安亿袋", "温州贷借款", "麦子借款", "桔子钱包", "狒狒人品", "信用掌柜", "点钱贷", "现金365",
                                 "现金飞侠贷", "海牛钱包", "五叶金融", "火火贷", "现金骑士", "秒啦", "大力贷", "睿诚宝", "迅分期", "哪儿借", "简单借钱", "桔子贷款", "黑马快借", "秒分期", "牛呗现金贷款",
                                 "现金分期贷款", "花呗极速贷", "易速贷", "急速贷款-现金借款", "云微码钱包", "借点钱贷款-小额现金借款借贷", "蜂窝钱包", "借贷钱包", "民间快借贷", "借顺贷钱包", "每日钱包", "借钱大侠",
                                 "火速借贷宝", "一路向钱", "雪荷卡", "借贷王小额贷款借款版", "周周卡", "分美钱包", "乐开花极速版", "钱快审", "闪电袋子贷款", "ATM急速贷", "闪贷极速借款", "借吧财富", "嘀嗒闪借",
                                 "易贷宝", "速易花贷款", "信用飞", "飞飞钱包", "分期借贷贷款", "万八千", "钱袋助手", "借钱借钱借钱-淘钱", "人品江湖贷-货款借款", "51用钱", "爱信管家", "职享花借贷家",
                                 "小周到口袋", "众借", "极速闪贷", "秒来钱", "钱站贷款", "速贷360贷款", "360贷款", "乐意花", "路路贷", "周周钱包", "贷款侠借钱借款", "钱侍郎-贷款", "玉米贷", "钱粒贷",
                                 "辉誉借款贷款", "现金来了", "平安i贷专业版", "钱贷", "新口子贷款", "微融贷款", "帮帮贷", "秒借花贝借款", "闪电袋子贷款-短期小额借钱借款", "十鼎宝", "纷信信用", "U小钱",
                                 "小钱好借", "咔迅", "51返呗-秒借贷款借钱", "任易贷", "速米金融", "捷信超贷", "666钱包", "迪迪好贷", "花豹VIP", "米多多钱包", "彩虹钱包", "无忧借款", "小周道口袋Pro",
                                 "贷嘛贷款", "融之家", "借钱么", "小牛借呗", "借贷专家", "钱到到分期-借钱贷款查征信小贷信用卡", "花呗芝麻借贷", "51返呗-现金贷款借钱app", "月光一族", "火贷款", "小佰用呗",
                                 "兜享花", "51返呗-信用卡借钱", "倍速贷", "真好花", "美易分", "嗯分期", "三毛借款", "来借钱王", "向钱贷借款版", "小禾微贷借款版", "宜信普惠", "贷点钱", "现金快递",
                                 "贷款-贷款贷款宝", "贷款-贷款贷款啦", "贷款-贷款贷款快速", "贷款王贷款", "58贷款贷款", "贷款贷款快贷款", "拍拍现金贷", "贷款-贷款宝", "贷钱来", "钱易达", "借钱钱", "借借款",
                                 "小微时贷", "向钱贷贷款", "闪电借款王", "借钱攻略", "借贷钱贷款", "淘钱贷", "快易花贷款", "蚂蚁借钱吧", "荷花", "91现金贷款", "有贝钱袋经典版", "慧融智选——贷款导航",
                                 "亿金钱包", "飞鸟贷款", "现金超市速贷版", "小周到口袋Pro", "幸福贷", "168钱包", "急速钱包", "联环贷", "钱站(爱钱进)", "乐开花-极速版", "用钱呗贷款-秒下款", "天天钱包",
                                 "钱侍郎-贷款借钱", "即刻贷-极速放款", "百度手机助手(2345贷款王)", "小额贷款-小额贷款-小额贷款王", "小额贷款-小额贷款-贷款吧", "现金分期乐", "花呗借点钱", "花呗分期", "花呗易",
                                 "贷款花呗", "借款呗", "玖富金融", "慧融贷款", "布丁小贷-贷款借钱", "百度手机助手(借贷宝)", "很好贷款借款", "畅享钱包", "聚利合小贷", "金钱宝", "维信闪贷", "华钱宝", "零钱夺宝",
                                 "速贷款", "手机速贷", "信用卡还款", "凡普信贷", "速贷小额借款贷款", "阿里钱盾", "7贷", "盛钱包", "联合钱包", "八借贷款-贷款", "刷白条", "吉银钱包", "公积金贷款",
                                 "极速现金贷", "U族大学贷", "贷我飞", "钱鱼贷", "牛呗借款", "网贷黑名单", "芝麻白条", "蚂蚁钱包分期", "小微贷款", "薪水贷", "鼠贷金融", "零钱支付插件", "易付宝钱包",
                                 "贷先生年轻人贷款分期", "随心时贷", "手机借贷", "晋情贷", "随心信用贷", "掌上信贷之家", "轻松借钱", "盛钱包商户版", "小借贷", "朝亿钱包", "信贷宝", "汇通易贷", "招商贷",
                                 "叮当贷", "先锋钱包", "易钱包", "校园e贷", "赚钱闲鱼-兼职赚钱", "小花急用贷", "微信贷", "爱趣分期", "小蜜速贷", "闪分期", "更美贷", "贷钱走借款-闪电借款", "微钱包",
                                 "易通贷理财-投资赚钱", "中金钱包", "零用贷借款", "学生贷", "U族贷学生版", "盛钱包成长版", "一秒飞贷", "秒借-极速贷款", "新升贷-员工", "芝麻白条－贷款王", "坤诩秒贷", "拍来贷",
                                 "速贷360-贷款借钱", "要借钱", "喵贷款", "网贷天眼", "个人贷款", "甜橙小贷", "人人爱信用贷", "现金盒子", "新房贷计算器", "贷款理财-借钱贷", "好又贷", "易通贷理财",
                                 "贷款-闪银借钱", "小额信用贷款借款", "陕西合吉贷", "百度手机助手(宜人贷借款)", "来钱宝_手机贷款(借钱,借款,借贷)", "信用卡贷款-审批快", "博富我来贷", "消费贷百事通", "网上贷款",
                                 "逸钱包", "万能贷—现金借款", "小蚂蚁信用现金贷", "信用贷款借款借钱", "搜狗手机助手（秒白条）", "贷欧巴", "信贷通", "及时贷-借钱贷款", "借点花呗信用贷款", "钱路理财", "缺钱么商家版",
                                 "现金快贷-手机借款", "火箭借贷宝", "社保查询-小额借贷钱包", "用钱宝-借款", "米到钱包分期贷款", "博金贷", "快乐达贷款", "分秒贷", "薪粤我来贷", "禹顺贷", "借贷",
                                 "贷款侠-借钱借款借贷", "来钱快", "极速借贷", "金燕快贷", "华汇钱包", "电兔社保贷", "胖虎钱袋", "秒贷-极速借款", "慧火钱包", "洋钱罐", "社保查询-借贷钱包", "钱包商家", "籽微贷",
                                 "雪中金融借款", "速贷款（贷款.借钱.借贷）", "分期极速贷", "速来贷款", "7贷合伙人", "贷款贷款-大小贷", "几千块贷款借钱", "51蓝领贷", "借贷口子贷款攻略", "天天兼职-手机赚钱",
                                 "兼职闲鱼-学生赚钱", "还呗借钱", "疯狂收钱吧", "捷贷宝-销售版", "优钱+", "晋商贷旧版", "借款王手机贷款", "现金侠借钱", "现金侠有钱", "借钱易", "快联贷贷款", "白户借款",
                                 "布丁贷款", "速贷钱包现金借款", "手机贷款-好借钱", "小额信用借款", "借款口子", "闪银贷款", "贷款大师", "名校贷-贷款分期借款", "黑白网贷", "借钱啦", "借钱钱包", "轻松贷款快速借钱",
                                 "快借贷款钱包", "好借贷款", "借钱头条", "应急借钱", "天天借贷", "极速贷借款", "永利宝借款", "虾球借款", "借贷宝贷款", "曹操借款", "贷款头条借钱神器", "速贷花呗轻松借钱",
                                 "征信借贷", "贷款侠借钱", "借钱365", "快钱借款", "快快贷借款", "借贷钱包-贷款借款借钱小微信用卡", "名校学贷", "借贷钱包-贷款借款借钱信用卡", "有鱼分期", "小花极速贷", "极速易贷",
                                 "闪电猫贷款", "找贷款", "天天借钱", "掌上借钱", "快手贷款", "小额信用贷款", "极速借钱-小额贷款分期", "差钱吗抢单", "51小额贷", "贷你飞", "快借贷款", "速贷-小额贷款",
                                 "一秒借钱", "火速贷款", "信用贷款王", "打个借条贷款借钱更简单", "积木借款", "来钱口子", "中华贷款", "小额信用贷", "好易借贷款", "省呗借款", "钱上钱", "帮你借贷款", "中百钱包",
                                 "现金钱包-借贷款借钱", "999秒贷", "且信钱包", "秒贷钱包", "现金飞船", "搜易借贷款", "贷上钱贷款", "云贷通", "贷贷王借款", "现金急速贷", "极速借条-贷款分期借款", "蝴蝶钱包",
                                 "易速闪贷", "信贷圈", "工薪借贷", "借贷通", "借贷神器", "打个借条贷款借钱", "信贷家", "天天贷", "金钱龟", "贷不贷", "钱铺子", "e诺钱包", "融易分期", "人人分期",
                                 "现金厨房", "飞鼠贷-借钱借款借贷", "现金加油站", "现金速贷", "卓智速贷", "速宜贷", "玖富万卡贷款", "口袋信用钱包分期", "帮捷贷", "财猫贷", "快贷宝", "贷款家", "E贷圈",
                                 "轻松分期", "帮贷宝", "便捷贷款", "零钱友", "借呗蚂蚁分期", "有小贷借款", "现金贷-小额借贷", "闪电贷款极速版", "不二钱庄贷款", "小贷鼠贷款", "小额信用贷款钱包", "飞鼠贷借款版",
                                 "轻松筹借贷", "轻松筹借钱", "信用卡贷款借钱", "快钱贷款", "贷款吗极速版", "现金借钱-贷款借款", "借你花钱包", "白领借贷", "发薪借钱", "花呗借款", "蓝领借款", "赫美易贷借款版",
                                 "借钱借呗", "极速贷款极速版", "久融贷借款版", "爸爸贷款", "手机信用贷款", "贷款无抵押", "有信贷款", "利欧小贷", "现金借款分期乐", "分期借贷-小额贷款", "信用贷款-信任贷款", "快借款",
                                 "速钱-极速借款", "钱包贷借款版", "恒信贷", "贷款app-借钱", "360钱小袋", "够范钱包", "诚贷", "功夫贷借款版", "速贷宝", "网贷钱包-借贷贷款", "亿宝贷投资", "白卡借钱",
                                 "手机借钱信用贷款分期", "开心贷", "借一借贷款", "惠贷款", "信贷助手", "现金侠领先版", "永辉贷款", "豆豆花小额借款", "小信用-贷款借钱借贷", "贷乎", "沙鱼贷", "车主贷-汽车抵押贷款",
                                 "小茗钱包", "快乐生活小贷", "瑞钱包V5", "boss借钱", "任信用-白条借款", "浩瀚钱包", "打白条小额贷款宝助手", "贷款侠小额现金借款", "快速现金借款", "猎贷贷款", "分期借钱",
                                 "鲨鱼钱包", "邮e贷", "借款之家低息手机贷款", "发薪借款", "借贷无忧", "宏岩易借贷", "金银贷", "借钱帝", "现金大侠", "网贷直通车", "借款王贷款借钱", "万家贷投资理财", "借款快",
                                 "小额闪电借钱", "51闪电钱包", "恒久贷", "小安信贷", "厚米借款", "现金狗", "无抵押借钱快", "宽贷", "钱小侠", "微盟贷款王dev01", "手机借钱-现金信用贷款", "信贷展业",
                                 "王者钱袋", "萤火虫分期服务", "极客贷", "优否飞碟贷", "贷上钱借款", "卡卡贷极速版", "白条极速版", "速贷呗", "钱院", "贷鱼侠", "微米贷", "一丁贷", "佳易贷", "金稻草贷款",
                                 "缺钱上", "信呗借款", "小贷钱包", "大行贷", "月光蓝卡现金借款", "喔喔钱包", "有鱼网贷", "闪电周转钱包", "微粒贷小额贷款", "用点钱", "蚂蚁微贷", "马蜂钱包", "奇速贷借款版",
                                 "即刻借款", "现金时贷", "闪电借款宝", "周周发薪贷", "加分贷", "58现金贷款", "雪中金融-小额贷款", "商通贷", "猪猪贷", "橙分期·喵卡", "易小钱", "名校贷-大学生贷款分期乐",
                                 "信用贷款-征信查询", "网络快捷贷", "申金贷", "小钱-贷款借款", "更美贷分期", "借款王借贷", "联银e贷", "轻易贷", "PP分期", "牛人贷", "钱企通", "二师兄借款", "手机贷借贷",
                                 "名校贷-学生分期贷款", "51拍拍贷", "雪山贷", "钱罐子", "手机贷款-分期", "车贷计算器", "银通贷", "银通微贷", "钱包", "借款专家—贷款信用分期", "轻松借款", "白领借款-极速版",
                                 "贷署", "钱庄理财", "手机钱包", "百度手机助手(闪电借款)", "秒赚大钱", "贷鱼", "蚂蚁小贷", "猎马借款", "喵喵借款", "乾牛贷", "我的易分期", "平安易贷-微粒贷", "美分期",
                                 "及时雨分期", "贷款计算", "贷款无忧", "提款宝", "网贷", "贷款123-小额借钱借款分期", "美女贷", "普惠贷款", "速贷信用卡借贷款", "豆豆钱闪电版", "懒人贷款", "金易钱包",
                                 "全国贷款", "分期侠", "公积金社保贷款", "轻松易贷", "吉信敢贷", "万家贷", "君融贷", "现金口袋", "铜钱宝", "众易贷", "51快贷", "猎马公积金贷款", "喵喵贷款", "刷呗分期",
                                 "速批款", "百度手机助手(手机贷-贷款借钱分期)", "趣钱包", "平安i贷-借款王", "用友钱客", "薪借贷", "原油黄金白银赚钱宝", "随易速贷", "速易贷-借钱贷款", "来借钱贷款", "商业贷款网",
                                 "贷款易", "卡卡贷款", "手游贷款宝", "熊猫易贷", "飞贷-手机贷款", "小贷宝", "网易有钱记账", "小贷在线", "招贷宝", "搜狗手机助手（2345贷款王）", "蚂蚁速贷宝", "快借款-借钱软件",
                                 "新易贷分期", "小微钱铺", "分期安妮", "招财猫易贷", "仁仁分期", "现金周转", "平安i贷款", "安信我来贷", "猫头鹰贷款钱包", "泰山贷款", "V贷", "速贷借呗现金贷款", "鲸钱包",
                                 "牛邦钱包", "龙贷", "借点钱花呗", "零用贷理财", "速贷博士", "搜狗手机助手（奇速贷）", "零钱淘", "约约贷", "18贷款", "千贷", "兴业网贷", "蚂蚁小钱", "轻松e贷", "美贷网",
                                 "夸时贷", "任我花-大学生贷款借钱", "搜狗手机助手（趣还钱）", "牛蛙钱袋", "敢贷", "快贷巴士", "平安易贷-普惠贷款", "易贷款-秒速借钱借贷", "小米贷", "功夫小贷", "乐百贷",
                                 "小花极速贷-现金贷款", "360分期借呗", "贷款_小额借钱", "借款宝-借钱", "小狗钱钱", "猎马钱包", "讯付钱包", "原子贷款", "多多贷", "人人分期官方版", "钱包易贷", "现金巴士-借款",
                                 "i贷借钱", "钞快贷", "搜狗手机助手（嗨钱）", "阳光速贷", "细粒贷", "钱程", "贷款老司机", "零花钱", "领先贷", "借小钱-小额贷款借款", "贷款-快速借款借钱借贷",
                                 "网贷手机贷-借贷款借钱信用卡分期", "工资贷", "借钱易-贷款分期借款", "闪电贷借款", "UA融易贷", "去头条-赚零花钱", "小小钱贷", "钱承有余", "秒出钱", "借钱无忧", "i贷款", "放款牛",
                                 "闪借贷款", "借钱快批", "一品钱包", "华融钱袋", "省钱王免费电话", "水象分期-小额贷款", "美借分期", "商道钱包", "微当现金贷款", "信贷员", "指到钱来", "民贷天下理财", "米刷钱包",
                                 "借钱花贷款（贷款·贷款·贷款）", "优普钱包", "消费贷款", "摩尔龙贷款", "嗨秒贷", "易贷款-借钱借款分期", "借贷钱包-贷款借钱", "快贷-贷款借款分期", "领钱", "贷你花", "企额贷",
                                 "量子借款-小额信用现金贷款", "贷款白条", "来借款贷款", "潮人贷", "钱借你贷款借款借贷", "乐钱", "百姓贷", "来分期借钱", "公积金借钱", "小钱快借-贷款借款", "有人贷", "长富贷",
                                 "手机钞快贷", "51小额速贷", "同牛速贷", "秒信贷", "拿下钱包PRO", "来借款", "借款-快速借款借款", "速速贷", "借款-借款-借款啦", "借款-借款-今日借款", "借款借款快", "极速贷吧",
                                 "小易闪贷", "答题赚钱", "铜钱贷借款版", "花钱无忧贷款", "众人帮赚钱", "绿洲闪贷钱包", "八戒快钱", "即刻现金", "西瓜贷", "美牙分期大众", "一元借钱夺宝", "芝麻易贷", "极速有钱",
                                 "杏仁分期", "掌e贷", "搜狗手机助手（及钱花）", "掌赚宝-手机赚钱", "小氢借钱", "现金贷极速放款", "蓝领借贷", "58借钱", "蓝领借钱", "微微安贷", "钱在台行", "老哥帮在线贷款助手",
                                 "华夏壹分期", "智汇宝钱包", "捞财宝借款", "360借贷通", "华融钱包", "银商宝钱包", "搜易贷理财", "借贷宝-安全版", "51借钱--小额贷款", "速贷之家-极速贷款", "拉卡拉钱包",
                                 "人人钱包", "1号贷", "金牛钱包", "老司机贷款", "淘钱", "水珠钱包", "蛋蛋车分期", "微用车贷", "会分期", "网易·有钱", "微时贷", "秒贷-快速贷款", "平安易贷", "星星学贷",
                                 "猎马贷款", "乐融快乐贷", "奇子向钱", "开鑫贷", "省钱助手", "钱宝有票", "秒贷贷款", "青蜂易贷", "名校贷-大学生贷款", "蜗牛钱包", "流金贷", "团贷网理财", "挖财社区-理财投资贷款",
                                 "旺贷", "爱贷网", "麦芽分期", "51闪贷", "约钱", "极速优贷", "天鹅贷款", "神速学贷", "财猪借钱", "贷铺", "杏林贷", "钱堂", "贷先生", "安怡贷", "一秒闪贷", "秒飞贷",
                                 "艾钱包", "现金袋-贷款借款", "助学贷", "卡贷", "星白条", "信和贷", "卡付钱包", "点分期", "宜人贷借款(信用卡极速贷款)", "我来贷款", "如意贷", "美差钱包", "好贷宝",
                                 "瀚银钱包", "猎马白条", "好车e贷", "贷款APP快速借钱借款", "饮马钱包", "借花花-贷款极速借钱", "贷款-贷款易", "666极速贷款", "书香贷", "速易贷借款", "融族金牌贷", "快钱",
                                 "放款啦", "今天贷", "学银钱包", "小钱包-手机赚钱", "e微贷理财平台", "有鱼贷款-借贷借款借钱网贷分期", "秒贷网", "孙贷圣-极速贷款", "借贷汇-贷款借款分期", "速环易贷", "功夫贷Pro",
                                 "希财信贷经理端", "搜狗手机助手（快钱钱包）", "点点借钱", "急用分期", "信用钱包-征信贷款借钱", "借款博士", "钱客通", "人人贷", "易借宝贷款", "简单贷借钱-现金贷款",
                                 "贷款APP-秒速借钱", "现金钱包-贷款借钱借款软件", "优分期乐", "钱鱼借款", "小额快贷", "简单借贷", "钱牛借款借呗", "小微钱包学生版", "借贷汇", "蚂蚁借钱", "光速现金贷款",
                                 "叮叮钱包", "小钱快借", "大学生贷款（星星学贷）", "大学生分期贷款", "现金钱包-借贷款借钱借款微信用卡", "给你花钱", "借款之家", "宜贷网", "爱借钱", "功夫贷－贷款借款分期",
                                 "2345急速贷", "借钱快极速版", "阳光快贷", "柏柏贷", "村信易贷", "豆钱花", "融360借款", "星星钱包", "拍拍贷理财(投资·赚钱)", "疯狂来找钱2", "便民钱包", "平安友贷",
                                 "拿下钱包极速版", "龙腾贷", "贝勒爷现金贷", "兼职答题赚钱", "钱方好近商户", "贷啦啦", "用钱宝借款", "发薪贷-贷款借钱", "速易借款", "借钱借钱", "忧信钱庄", "顺心易贷",
                                 "2345分期王", "豹子融", "51社保管家", "国众宝", "喵卡", "掌融宝", "诺信营行", "天财宝", "米缸金融", "小小金融", "泰达在线", "利融网", "大米借呗", "拿去花",
                                 "联璧金融", "江湖盘缠", "超級錢包", "买呗(商户端)", "小安时代", "货车帮货主", "小金", "小袋快借", "普汇云通", "银谷在线", "周转花", "还卡啦", "闪飞", "靠谱花", "享借",
                                 "简单借", "借天下", "简融", "零用金", "快借", "多享借点", "北银消费", "好借", "借了花", "闪现", "融亿借", "财富的士", "用易宝", "Minecraft", "享花花",
                                 "58口袋", "随用宝", "哔哔借卡", "芒星借条", "易借条", "巴士借条", "随手借点", "真好借", "秒借王", "借多少", "随借", "随借宝", "趣借吧", "借无忧", "临时借", "开心借",
                                 "友借友还", "钞好借", "借易得一体机", "口袋快借", "花了借呗", "速易花", "随信花", "极速花", "享零花", "花信", "花吧", "花点", "抢先花", "花银", "小花信用",
                                 "闪银借贷宝", "百度手机助手(拍拍贷借款)", "先花借钱", "汇借钱", "几千块-贷款借钱分期", "立借管家", "现金借钱贷款", "贷款快-快速借钱王", "发薪借贷", "借花花贷款", "有鱼借钱",
                                 "大众借", "2345借款王", "借了吗分期", "借钱平台", "小白借款", "分期借贷-贷款", "多借社区", "51贷", "工薪贷", "小微学贷", "高校贷", "极速学贷", "巴士快贷",
                                 "口子来了-小额贷款", "信代宝现金贷", "神马贷款", "你贷我贷", "搜狗手机助手（微粒贷）", "低息贷款", "极速快贷", "阿朋贷", "贷理财", "网贷手机贷", "微粒贷款", "贷分期", "快贷吧",
                                 "菜鸟快贷", "黑户贷款", "草根贷", "搜狗手机助手（哈喽贷）", "AK网贷", "豆豆花-小额贷款", "小贷款", "安心贷", "乐贷款大额分期", "爱投易贷", "贷款广场", "现金大人", "现金时代",
                                 "花呗", "乐花分期", "51分期", "秒付分期", "三星钱包", "掌上用钱", "百度手机助手(百度钱包)", "信用小钱", "公牛钱包", "蜂鸟钱包", "钱亿堆", "大地零花钱", "钱小二",
                                 "望望先花", "打个借条--小额贷款分期", "在线贷款", "手机贷款-贷款王", "好借贷", "帮贷款", "蚂蚁来贷", "消费贷-贷款信用借钱", "小花借款", "天意钱包", "云钱袋", "品而金融",
                                 "互联网金融平台", "百度金融商户", "小微金融", "恒昌", "多财宝", "百福", "信分宝", "快薪宝", "应急卡", "拍拍贷", "贷嘛APP", "宜人贷", "南宁市长泽投资咨询有限公司贷后部",
                                 "飞贷金融科技", "飞跃贷", "闪贷APP", "PICC人保助贷险", "新浪微贷", "好贷网", "赫美微贷", "我来贷-全球百强", "万惠及贷", "e速贷", "大众贷", "保准贷", "贷嘛",
                                 "信贷动力", "个性贷", "立即贷", "来贷吧", "闪宜贷", "钞市借贷", "钱有路极速贷", "贷到钱", "看准贷", "温商贷", "好贷钱", "暖贷", "有贝极速贷", "盈盈易贷", "鲸鱼贷",
                                 "天天快贷", "瞬闪贷", "贷安啦", "信业贷", "贷吧网", "荣誉网贷", "想贷就贷", "普惠信贷", "中银信贷", "和聚贷", "拍拍好贷", "八戒速贷", "畅快车贷", "平安易贷反诈骗调查科",
                                 "e贷王平台", "应急贷款超市", "乐享速贷", "金玉速/贷", "点金速贷", "民生信贷", "e贷王口子", "蚂蚁小贷委托方金融联", "贷妈妈", "后河车贷", "联金微贷", "i贷", "杏仁钱包贷款",
                                 "粿融贷", "兴速贷", "极易贷款", "榕树贷款超市", "91短贷", "鑫贷金融", "圈圈贷", "91车主贷", "蜂e贷", "亿宝贷", "网贷达人", "汇小贷网", "借贷网", "民贷天下",
                                 "手机贷委外调查科", "浩森时贷", "闪贷超人App", "贷欢超市", "星时贷", "救急贷", "哇噻贷款", "汇贷", "美借贷款", "帮你贷", "贷款帝", "借贷家", "助贷网", "闪信贷",
                                 "信和小贷", "2万贷", "中合贷", "零钱贷", "快金贷", "金峰速贷", "90贷", "90贷吧", "易钱庄", "全民用钱", "小象钱包", "六金钱", "快来钱", "借点钱App", "虾米钱站",
                                 "必须有钱", "七七钱包", "融些钱", "送钱啦", "幸福钱庄", "逗乐钱包", "广源信用钱包", "信用借钱", "省钱妙招", "共享钱袋", "易周钱包", "钞速钱包", "缺钱吗", "大林钱包",
                                 "钱坤信息", "钱到到", "差钱吗平台", "钱内助", "钱盒子金融", "有贝钱包", "万能钱柜", "缺钱么APP通知", "小虫钱包", "青年借钱", "道拉钱包公众号", "柚子钱包", "小钱包",
                                 "借钱邦", "一米借钱", "财神钱包", "五板钱包", "微钱科技", "给你花APP", "随意花", "马上花", "花无缺", "借趣花", "小花商城", "花虾金融", "借点花花", "多多花", "送你花",
                                 "富宝", "新口子", "友金云测", "速到口袋", "惠家金融", "兑啦", "金钥匙", "威士白金版", "千诚", "金瑞龙", "袋袋付", "阿里金手", "易乾包", "卡农金融", "一账通平安汇",
                                 "秒付", "橙e财富", "现货宝", "赫美金客", "糯米袋", "微易融", "指旺理财", "小鱼通付", "花生惠", "乾包", "宜信财富", "糯米袋·店长版", "五秒周转", "卡友联盟", "齐乐国际",
                                 "誉用金服", "小赢普惠", "365橙融网", "善信", "富宝袋", "免息宝", "老哥帮", "汇急宝", "51周转", "普惠帮", "捷越资信", "南瓜马车善理", "银谷普惠", "开花啦",
                                 "51卡宝商务版", "玖富金服", "易融之家", "贝兜金服", "中银易家", "如期", "普惠家", "百家", "紫金普惠", "月光蓝卡Pro", "卡联快付", "卡卡专家", "闪电助学", "周转无忧",
                                 "手机周转", "提额神器", "乐用宝", "弈信宝", "借款快-闪电贷款借钱借贷", "快借现金贷款", "2345借贷王", "闪电快贷", "手机贷款借款", "微粒贷借钱", "咔咔贷", "善易贷",
                                 "借款专家小额贷款版", "绿洲闪贷分期", "现金奶牛贷款", "诚易贷", "快钱贷", "聚合信用贷款", "信用贷款分期", "温州贷理财", "微粒贷贷款平台", "有信贷款-借钱.贷款平台", "贷款吧-借钱快",
                                 "随便借贷款", "学子易贷", "简单贷", "全民贷款花呗", "现金口贷", "用钱呗贷款", "免费贷款", "考拉贷款", "科易云贷", "三分贷", "借吧-小额信贷借款", "任我花-年轻人贷款借钱",
                                 "粒粒贷", "汇贷网", "51贷款助手", "跟我贷", "速借微贷钱包", "云集贷", "贷款借钱吧", "借贷王分期借", "优啦电商贷", "搜狗手机助手（宜人贷借款）", "贷款云", "小赢快贷",
                                 "钱借你贷款", "一信贷借款版", "你我贷款", "大圣钱包借钱贷款", "贝勒爷借钱贷款", "闪贷借款", "黑马贷", "2345贷款王借钱贷款", "网商贷", "钱院借贷", "好迈钱包", "银钱包",
                                 "微客钱包", "51零用钱包", "UCOIN钱包", "野兔钱包", "现金信用钱包", "借一借钱包", "大鱼钱包", "91钱包", "爸爸钱包", "小猪钱包", "随便借-现金货款借款", "征信借钱",
                                 "信用借款借钱", "易借钱APP", "微粒借钱", "白借借条", "借钱网", "天天小额现金借款", "玖享借", "借到", "老账房借款", "来钱道", "微钱宝", "钱袋袋", "桔子钱袋", "马上有钱",
                                 "云联惠+", "身份证贷款借钱", "租呗信用钱包", "曹操贷款", "今日还款", "还款宝", "借薪卡", "及时雨钱包", "黔农e贷", "恒大金服", "飞猪时代极速版", "鑫鑫金所", "即时花",
                                 "无限贷", "人人信用", "极速汇贷款", "信富期贷", "51即刻有", "盛隆钱包", "拍拍口袋", "我要现金", "先花一亿贷款", "借钱360", "珠宝钱包", "大米贷手机贷款",
                                 "百度手机助手(贷上钱)", "信誉借", "信和钱包", "杏仁富钱包", "凤凰贷", "慧付钱包", "大圣钱包", "小钱包借钱", "蜜宝", "赊购呗", "还好贷", "卡宜贷代还版", "笑宜钱包", "有额度",
                                 "民E天下", "光速微贷", "有个金窝", "信通袋", "点融魔借", "短贷王", "速取钱包", "钱进一号", "中银消费钱包", "出粮", "无忧贷", "一口贷", "万能贷", "中鸿贷", "借款小二",
                                 "即点即用", "周转信贷", "萌虎白卡", "鸡毛信借款", "万贯街游戏贷款", "借享钱包", "全国钱包", "凡易贷", "果冻小贷", "盈信通", "米米罐", "蛋花花", "闪讯借款", "随时现金",
                                 "可以贷", "亿融普惠", "借条大师", "点借", "借东风", "全网贷借钱借款", "大白钱包", "小七贷", "开心分期", "花无忧贷款闪电借款", "花金宝贷款", "蜂鸟时代", "银码头", "凡普信",
                                 "拍拍贷借款-借钱借贷", "极贷管家", "派大薪", "现金借款-贷款app", "便捷时代", "小鹅贷", "月牙钱包", "来花呗分期购", "极速达", "米点花", "资金管家", "蜂优贷",
                                 "钱金金贷款-分期借钱", "悠回收", "蚂蚁金融", "维信卡卡贷", "久付钱包", "信用岛", "及时金", "民富借条", "洋葱借条", "简单信用", "悦借钱", "掌柜卡包", "你先花", "现金速达",
                                 "花啦啦-闪电借款现金贷款", "花钱无忧借钱借款", "钱进袋", "银子钱包", "锦钱宝", "青年借贷", "2345贷款王-贷款借钱", "熊猫分期", "包有钱", "王者人生", "360借条-贷款分期借钱",
                                 "e小袋", "借钱花花", "印象贷借款", "好来贷信用小额贷款", "小赢卡贷贷款借钱", "微粒信用小额借款", "新浪有借-手机贷款借钱", "来点现金", "极速贷款借钱花", "现金贷分期小额贷款",
                                 "秒白条小额贷款借款", "花花贷款", "钱来也", "无忧宝", "秒白条贷款", "钱包精灵", "12贷款", "亚热小额贷款", "信用白卡", "借呗－极速放款", "全网贷", "奇乐现金", "小猪贷",
                                 "微贷现金贷款", "现金借款闪电贷", "现金贷款（手机贷款）", "短借钱包", "秒秒分期", "老哥帮小额借款", "考拉信用(极速放款)", "腾分期", "芝麻钱包借钱", "花无忧贷款", "贷款社保贷",
                                 "7天贷", "机遇钱包", "乐翠钱包", "火山钱包", "犀牛优品", "神马借条", "闪分期管家", "常花花", "宜人贷借款贷款借贷平台", "京东易貸", "快借钱包", "Loserbank", "职享花",
                                 "K贷", "众安保险", "卡还王", "大白汽车分期", "极速荷包", "猪手机", "银河黑卡", "鱿鱼宝", "零钱巴士", "信贷金融", "好易花", "猎豹贷款", "现贷猫", "闪电借钱", "魔法现金贷",
                                 "信用金卡", "小和钱包", "小草钱包", "我借你花", "12贷款记账", "刀刀钱包", "华信钱庄", "天下白条", "小萌钱包", "得亨快贷", "福贷", "萝卜借款", "钱帮德", "陛博钱包",
                                 "零钱超市", "秒白条-小额贷款借款", "花财", "熊二钱包", "小马易贷", "周转金", "手机嗨钱", "信瑞通", "全贷走", "招手贷", "转机", "钱少爷", "火贷款现金版", "易友钱包",
                                 "钱到到分期贷款借钱", "51借到", "众贷钱包", "光速借贷", "助力钱包", "省心借", "糖果信用", "金洋宝", "钱大道", "钱龙解急", "零钱专家", "周转王", "小牛及贷", "无忧白条",
                                 "爱消贷", "富金贷", "袋鼠达人", "塔塔信用", "贝才贷贷红", "钱脉", "信用管家借钱", "全网贷-小额借钱借款", "来钱快贷", "金兔点点", "嗨贷", "佰仟买买钱包", "钱金金",
                                 "51摇钱树", "御万金", "小米贷款极速版", "借365", "耀贷", "百度手机助手(原子贷)", "资牛金服", "闪电白卡", "三秒贷", "人人荷包", "代代还", "可可钱包", "得富宝", "花了呗",
                                 "贝客钱包", "借钱快手", "好好借", "易朵花", "有贷", "玖河", "立借", "花鑫宝", "飞鸽钱包", "现金借款到账快", "身份证借钱-借钱", "黑马快借手机贷款", "恒快贷", "优益融",
                                 "包公钱包", "千米红包", "小咖贷", "急借宝", "斗米", "晋情借", "现金卡借款", "用卡达人", "乐无忧", "享钱花", "信用快贷", "周转包", "商奇宝", "熊猫钱袋", "花满多",
                                 "诚借", "雨花钱包", "分期贷款借钱宝", "正好花借贷", "融e聚贷款", "钱夹子旅行", "钱秒贷", "万用钱包", "天天红", "怡人钱包", "招财蛙", "无忧钱庄", "易速贷款", "有个钱包软件",
                                 "机慧", "极速信用", "聚宝钱包", "财多多", "酷鱼", "闪银宝", "E闪贷", "万达普惠", "云禾钱包", "众可贷借款", "存信誉PLUS分身", "宜人贷款", "小黑鱼", "急用钱应急",
                                 "熊猫分期分身", "超人卡", "钱大侠-保险贷", "钱隆柜", "借我", "急速钱袋", "明日小贷", "现金秘书", "取点花", "无忧达人", "易到钱包", "众享花", "钱包闪借",
                                 "拍拍贷借款-借款贷款", "零小宝", "向钱靠", "天下钱包", "顺意钱包", "天天借款", "小黑鱼-信用卡贷款", "贷款极速到", "惠车联动", "立业贷", "钱多宝", "魔法现金-借款",
                                 "借点钱手机贷款", "51返呗-贷款app", "备贷录", "飞象金服", "元正钱包", "壹秒贷", "身份证借钱-贷贷款", "银河闪贷", "好事多", "活力花", "花啦啦现金贷款", "随心花", "周末钱包",
                                 "米和贝壳", "天天转机", "好还分期", "宜速贷吧", "快速时代", "旺财贷", "好借好花", "小花白卡", "布丁米多多", "惠花花", "有个钱包", "极速葡萄", "海贷", "澜山信用",
                                 "灵通钱包", "现金快换", "美丽花", "租来花", "万两柜", "来周转", "苏宁消费金融", "你来呀", "福袋", "鑫梦享消费贷", "嗖嗖借", "机遇宝", "美期分期", "小额贷款之中鸿贷",
                                 "新浪有还-信用卡贷款", "新浪有还卡贷借钱", "薄荷好借", "钱到了", "代元人", "新民钱包", "拍拍贷财富(投资·赚钱)", "胖蚂蚁", "365现金卡", "现金飞船贷款", "秒借-专业版", "千金易",
                                 "金壹贷", "众银家", "百家钱站", "零花宝", "狗狗贷", "白条周转", "钱海", "平安i贷贷款", "一点分期", "苏宁金融分身", "爱心资料包", "易取钱包", "经银宝", "迅捷零钱", "有还",
                                 "巨方助手", "巨方卡管家", "巨方钱包", "信誉宝", "安捷宝", "爱来借", "秒到手", "极速钱包贷", "合缘万卡", "速借钱包", "同信缘", "好掌柜", "小熊信用", "银杏帮", "闪贷侠分期",
                                 "反掌贷", "备胎信用", "借条", "借钱超速贷款", "旺旺借条", "秒速贷款借钱借款", "易借款", "七星钱包", "付二代", "天际速贷", "钱包联盟", "小薪分期", "粒子贷", "钱庄",
                                 "零用宝", "八戒荷包", "七日借", "银富卡", "来借贷款借钱借款", "快购168", "易达钱包", "米粒钱包", "熊猫钱包", "爱钱钱", "借来花", "一起花", "享换机", "钱乐宝",
                                 "银丰钱包", "乐天速贷", "现金小额贷", "速信记账", "急贷", "借帮帮", "估呗白卡", "钱立得", "有信达人", "享加班", "享花分期", "捷信贷", "开心行销", "融商贷10", "卡小蜜",
                                 "又一贷", "一佰购物", "任你花", "富利宝", "猫猫钱包", "瑞智达购物", "秒到借款", "质高商城", "趣易购365", "顺心借", "微钱金控", "平安精选", "吉祥钱庄", "钱乐享",
                                 "快乐贷", "佰宝袋", "贷嘛贷款借钱", "钱包贷--极速借款", "创宏应急贷", "小通币咚", "蓝月借条", "搜狗手机助手（悦借钱）", "云白条信用钱包", "借钱花借款", "拍拍有钱", "新新钱包",
                                 "周周白条", "侬要贷", "借乐宝", "拉比鸟", "花逸钱包", "力天贷", "贴心小贷", "优优借", "51返呗贷款-小额借贷", "速信", "悦花花", "西瓜现金", "巨浪钱包", "乐花花",
                                 "乐享还呗", "新新贷金融", "易坤钱包", "捷通钱包", "容易借款", "乐宝贷", "速米袋小额贷款", "扎堆儿", "阿尔法信", "轻量子", "机猫", "流星宝", "空投", "指用", "玉猫",
                                 "海典盛", "小鸡快跑", "圆圆来了", "赢金鑫", "易顺宝", "小宇宙", "小腰包", "嘟嘟白卡", "蜜蜂钱包", "YY信用", "聚品花", "闪来钱", "钱真多", "包找钱", "钱包到家",
                                 "闪收", "如意口袋", "任分期", "银多多", "奇灵钱包", "诺远普惠", "柚子信用", "海马钱包", "猫花花", "金银花", "萌牛时代", "看准", "91极速购", "信用星球",
                                 "小黑鱼-会员消费平台", "易见金服商户版", "蚂蚁人品", "让你拿", "人人快借", "袋米乐", "趣花生活", "呗呗", "联合国际", "零钱袋子", "菠萝钱包", "吉祥一号", "芒果应急", "点必达",
                                 "金蝉子", "速花中心", "即速回收", "51开薪花", "久久钱包", "米米借", "老张有钱", "纷信", "伏地魔", "分期还", "两个狒狒", "天瑞钱包", "钱周周", "六六钱包", "暴风钱包",
                                 "随心借", "无价宝", "一点信用", "蚂蚁金宝", "去哪借", "天机阁", "进财宝", "上上钱", "帮你富", "现金宝宝", "海螺商城", "懒人小钱", "借钱呗", "金豆豆", "即速回收-闪电到账",
                                 "飞历宝", "鲨鱼白卡", "罗小白", "51黑卡", "一秒现金", "汇钱包", "快乐回购", "365花无忧", "任性放", "开心钱袋", "讯秒", "钉钉白卡", "人人好信", "闪电回收", "可可钱袋",
                                 "小米钱包", "星享花", "有米淘", "纳米工厂", "老牛帮", "安信花", "66钱庄借款", "凡普信-借款顾问", "金机宝", "好分期", "现金掌柜", "中银消费金融", "萌新钱包", "小牛秒借",
                                 "小米易借", "幸运花", "荣易花", "元宝壹号店", "玖印钱包", "拍拍钱庄", "极享花", "小钞花花", "闪电虎", "花无尽", "金牛宝", "钱站官方版", "微现金", "玖四借", "威力花",
                                 "借款360", "富临门", "易借口袋", "嘉汇钱包", "房司令", "大众金服", "绿豆商城", "淘米8", "加油花", "优易借", "小鹅钱包", "共赢速借", "富友乐", "提钱花", "钱生宝",
                                 "51回购", "飞鸟钱包", "风水茶商城", "极速周转", "来钱花", "豆豆金", "联仲网络", "速袋侠", "微额借款", "多米云", "金融微店", "佰仕钱包", "丁三", "闪电花花", "天元宝",
                                 "豹有钱", "借点儿", "提钱周转", "便捷花", "豌豆商城", "互盾应急", "一斗米", "新浪有还大额版", "急速快借", "带上钱", "蜜思优", "闪电商城", "卡卡钱包", "有机转转",
                                 "天天钱袋", "今日借", "秒借款借钱", "周润花", "公主借款", "龙分期", "小马应急", "众乐", "搜狗手机助手（借钱快）", "蓝月钱包", "聚米星球", "AK官网", "应用商店（萌虎白卡）",
                                 "瑞银通", "金龙钱包", "魔力花花", "趣借点", "易花宝", "向钱进", "有钱花Lite", "金兔宝", "花掌柜", "万能钱庄", "金易借", "趣当铺", "极速收", "蜗牛小宝", "要借么",
                                 "财源1号", "联动闪银", "资金宝", "零度钱包", "借钱花借款-借钱借款", "小众荷包", "小金人", "君易来", "贴心钱包", "金贝壳", "信用金钱包", "太秀商城", "无忧花", "融信回收",
                                 "海豹商城", "金粒得", "畅易花", "藏金库", "永利金服", "51收款宝", "萝卜商城", "用钱大师", "米多花", "如期分期", "爱转转", "随行花", "桔子宝", "柚子精选商城", "极速花花",
                                 "66钱庄", "无忧钱包", "e租盈", "借悦", "赤兔钱包", "花借", "马上金", "华融消费金融", "我享借", "提现啦", "嘀嘀花", "18速借", "零花钱包", "花螃蟹", "花夫人",
                                 "闪电易借", "361白卡", "低息借钱", "秒下米", "金马小袋", "极速钱包君", "一周钱包", "闪金易借", "转机宝", "虎虎钱包", "寻钱记", "叮咚到账", "万千智能管家", "贝贝钱柜",
                                 "花借账本", "51闪电购审核下款", "房秒借", "网商金融", "丰马钱包", "老王钱庄", "飞凡优品", "鲸鱼白卡", "嘟嘟白卡软件", "快来借", "小鹿回收", "瑶钱树", "长城金服", "趣租白卡",
                                 "肥猫钱包", "万融普惠", "钱秒借", "爱分期", "空投包", "金缘宝", "多来米", "天猫白卡", "大鹏钱包", "放钱快", "现金急用", "人品之家", "爱钱记", "趣白条", "分七云",
                                 "有钱记", "金鹿钱包", "金银花宝", "领点花", "萬和金", "还了么", "卡妹儿", "小鲨分期", "趣租租", "爱钱钱Pro版", "弹个花", "智享金", "快惠钱包", "财富通", "熊花花",
                                 "远大钱程", "玖毫钱袋", "么么哒钱包", "金牛易借", "月来越好", "芒果白卡", "花花借钱", "码上行", "诚盾", "E借", "喜乐街", "习惯花", "回购51", "信用专家", "共享钱包",
                                 "钒卡", "数字钱包", "应用商店（钱真多）", "没钞蜂", "有利网", "花酷", "卡猫信用卡管家", "金稻", "卡卡龙", "安安现金", "极速回购", "考拉信用-极速放款", "屌丝回收",
                                 "洋钱罐借款", "能卡", "帮帮宝", "借款平台", "鹿鹿钱包", "51代还", "秒下", "花啦啦", "卡友商服", "来的快", "萌新记账", "疯淘金", "芒果旺卡", "点牛金融", "快支付",
                                 "富勤金融", "金米钱包", "天天回租", "爱放米", "华乐付", "咖啡易融至尊版", "钱包下", "小雨点", "爱钱柜", "花乐享", "帮帮回租", "畅快", "海润钱包", "金鸡时代", "蛋花花借款",
                                 "大象钱包", "喵喵钱包", "钱大圣", "轻松还卡", "优米花", "融易花", "花豹", "凡客之家", "易生活分期", "连环金服", "乐回购", "急用钱包", "米米茶商城", "月光钱包", "币聊",
                                 "惠即钱袋", "有零花", "华融金服", "收机掌柜", "考拉钱柜", "速盈钱包", "招财钱包", "钱老庄", "妙优车", "叮叮钱柜", "爱转", "人人还", "小米应急", "借个芝麻", "鑫合汇",
                                 "通源金信", "掌上乐园", "海草钱包", "吉隆钱包", "钱来到", "借呗借款", "铺连铺", "急借白卡", "中睿盛通", "享回购", "金立花", "51钱进", "借易点", "花花购", "金猫",
                                 "有余go", "易多代", "信義貸", "无限花", "广源钱包", "钱宝宝", "小米掌柜", "千牛钱包", "imToken", "串串盈", "急救包", "芒果金柜", "信用转机", "金贝猫", "肉肉钱包",
                                 "金融苑", "春天花", "乐浩钱包", "mo9钱包", "玖富信用卡借款", "急速周转王", "百度手机助手(点信)", "闪贝", "永润钱包", "旅游白卡", "租了么", "金螃蟹", "华夏万家金服",
                                 "水象云", "如意宝", "花鹿", "点指乾坤", "便利现金", "易好卡", "e信云通", "微可袋", "糖糖好借", "信富商学院", "博海钱包", "孟掌柜", "微拍堂", "小息应急", "平安普惠1",
                                 "米袋", "西瓜优选", "王者借钱", "OK回收", "秒回购", "快享金", "来钱啦", "极速换钱", "闪电借款大额版", "拿钱花", "无忧卡管家", "真融宝", "丁丁猫", "估吗估价", "闪借侠",
                                 "金速达人", "91分期", "洁美智推", "蜜蜂分期", "悠多多", "上善普惠", "每天钱包", "贵生态", "河马有钱", "快乐达", "i代", "小样钱包", "万能借钱", "马上用", "众和",
                                 "估估白卡", "百借", "立享现金", "有钱花花", "应急金库", "多多钱柜", "升昌钱柜", "幸运钱袋", "信之富", "圈圈速借", "钱迎迎", "轶达钱包", "小猪回收", "湧金", "能森钱包",
                                 "众人帮", "壹周宝", "猪猪钱包", "指旺财富", "百度手机助手(现金借款)", "借百家", "呆呆购", "招财吧", "微沙信用", "开心花", "金虾米", "银河钱包", "小赢钱包", "日月花",
                                 "星月宝", "百度手机助手(有钱花)", "优亿金融", "微粒钱包", "泰融普惠", "花米钱包", "乾坤包", "盛大金融", "信呗钱包", "旺旺花", "范大大", "置信宝", "小联钱袋", "给力花",
                                 "多多薪", "橘子分期", "新版钱站", "闪电应急", "借款侠", "来米花", "花花档", "三点钱包", "信用生活", "渤海期货", "借钱花借款-信用现金", "乐信付", "通达钱包", "小迪钱包",
                                 "机米花", "引力口袋", "99花", "小小麦", "佩奇快借", "吉米盒子", "薪能量", "撸米王", "百万钱包", "趣蚂蚁", "借立得", "优信卡包", "随信用", "一点商城", "信得多",
                                 "融租乐", "芒果金融", "万通宝", "随心无忧", "现金回收", "钱包生活", "借的到", "钱包你下", "华都商城", "91代还", "极速白卡", "e慧通", "乐客宝", "小米仓", "快闪钱包",
                                 "速秒借", "美丽回购", "QM钱包", "趣回收平台", "果然好借", "好下款", "花狐狸", "魔法现金pro", "大白易借", "趣回购", "筷乐花", "急用管家", "风水钱庄", "读秒钱包-借钱借款",
                                 "魔buy商城分身", "钱时代理财投资", "私房钱站", "新浪有借大额版", "黑马手机借款", "万贯街", "借钱口袋", "信易回收", "和信普惠", "幸福钱包借钱借款", "丰盈宝", "土豪钱庄", "钱库",
                                 "喜金宝", "毛毛虫", "爱转机", "钱嗨娱乐", "安心分期", "蚂蚁宝", "爱周转", "钱生花", "叫我有钱人", "华夏普惠", "现金树", "纷享花", "牛牛钱包", "小宝应急", "借机花",
                                 "一闪", "要钱快", "贝享分期", "复星钱包", "藕丁钱包", "百彩钱包", "来福钱包", "金桔优品", "财富多", "小嘎豆分期", "轻松花", "风水回收", "惠时代", "好信账单", "优麦回收",
                                 "信而富分身", "如意金", "速来借", "信用租", "快支付-信用卡取现", "鑫瑞", "马客钱包", "融易宝", "乐乐信", "萌钱包", "星易花", "亿回收", "应用商店（钱包到家）", "百优帮",
                                 "宝富时代", "金宝达人", "玩赚红包", "娱管家", "有银子", "小星钱包", "应急客", "今来借", "信用额", "小强花呗", "一诺万金", "亿信回收", "租来用", "守信网商", "点币达",
                                 "零钱宝", "点购商城", "诚信钱包", "口袋逆袭", "首创钱柜", "金惠卡", "华语", "易下款", "糖果钱包", "贝壳金展", "财驿站", "中邮消费金融", "万三应急", "口袋借款", "超G会员",
                                 "七牛钱包", "享乐购", "天天借道", "乐租机", "优款", "易还吧", "代帮主", "当袋宝", "千机变", "额度宝", "今随借", "潮人钱柜", "移动钱箱", "金鱼钱包", "赚钱赚钱赚钱赚",
                                 "龙马应急", "秒购", "应急闪云", "金茂回收", "万顺钱包", "星火米袋分期", "即速回收-极速回收闪电到账", "钱小侠速借", "蘑菇钱包", "名品商城", "速借吧", "期待合伙人", "金元宝",
                                 "花有商城", "大鹏友借", "娱钱包", "富卡", "我来借", "嗨钱宝", "来这有钱", "蜜思优商城", "小米花", "黑色金纹", "备用钱包", "乐乐借借款", "麒麟钱柜", "即刻借", "信用精灵",
                                 "多米白卡", "招财猪", "华泰期货", "有还呗", "来转吧", "支迅通", "大都汇", "滴滴花", "招财猴", "爆米花"]


    def __get_all_contact(self,type=''):
        ret = self.mongo.query_all_by_userId_inXdays(db='lake', collection="s_user_mobile_contact_{0}".format(
            int(self.info.user_id) % 4), find={"user_id": int(self.info.user_id)}, serial_no=self.serial_no,
                                                     start_days=2000, end_days=2000)
        LastNotNUll_contact=''
        FirstNotNUll_contact=''
        if len(ret)==0:
            return False
        for row in ret:
            row_time=time.strftime("%Y-%m-%d %H:%M:%S", row.get('_id').generation_time.timetuple())
            if row.get('_id') and len(row.get('contacts'))>0 :
                if len(LastNotNUll_contact)==0 or time.strftime("%Y-%m-%d %H:%M:%S", LastNotNUll_contact.get('_id').generation_time.timetuple())<row_time:
                    LastNotNUll_contact=row
                if len(FirstNotNUll_contact)==0 or time.strftime("%Y-%m-%d %H:%M:%S", FirstNotNUll_contact.get('_id').generation_time.timetuple())>row_time:
                    FirstNotNUll_contact=row
        if type=='last':
            return LastNotNUll_contact
        if type=='first':
            return FirstNotNUll_contact

    def contact_area_cnt(self):
        """contact_area_cnt通讯录归属地数量"""
        contacts=self.__get_all_contact(type='last')
        if not contacts:
            return self.SET_DEFAULT_VALUE_INT_9999999
        # 获取通讯录中的联系方式
        contact_list = self.info.get_mobilephone_list_by_contacts(contacts.get('contacts'))
        #清洗联系方式，获取手机号
        contact_list = self.info.get_mobilephone_list_after_cleaned_dict(contact_list)
        #获取归属地
        contact_list = self.info.get_mobile_location_list(contact_list)
        return len(contact_list)

    def contact_rela_name_cnt(self):
        """contact_rela_name_cnt 通讯录亲属昵称数"""
        contacts = self.__get_all_contact(type='last')
        if not contacts:
            return self.SET_DEFAULT_VALUE_INT_9999999
        relatives_nickname_list=[u'岳父',u'岳母',u'爸',u'妈',u'老婆',u'老公',u'亲爱',u'宝宝',u'宝贝',u'哥哥',
                                 u'弟弟',u'姐姐',u'妹妹',u'姥',u'爷爷',u'奶奶',u'外公',u'外婆',u'叔',u'伯',
                                 u'姑',u'姨',u'舅']
        contact_rela_name_cnt=0
        for row in contacts.get('contacts') :
            for sub_name in relatives_nickname_list:
                if row.get('name').find(sub_name)!=-1:
                    contact_rela_name_cnt+=1
                    break
        return contact_rela_name_cnt

    def contact_cnt(self):
        """contact_cnt通讯录条数"""
        contacts = self.__get_all_contact(type='last')
        if not contacts:
            return self.SET_DEFAULT_VALUE_INT_9999999
        return len(contacts.get('contacts'))

    def contact_cnt_ratio(self):
        """contact_cnt_ratio 通讯录条数变化"""
        ret = self.mongo.query_all_by_userId_inXdays(  db='lake',
                                                       collection="s_user_mobile_contact_{0}".format(int(self.info.user_id) % 4),
                                                       find={"user_id": int(self.info.user_id)}, serial_no=self.serial_no,
                                                        start_days=2000, end_days=2000)
        LastNotNUll_contact = ''
        FirstNotNUll_contact = ''
        if len(ret) == 0:
            return "通讯录为空"
        for row in ret:
            row_time = time.strftime("%Y-%m-%d %H:%M:%S", row.get('_id').generation_time.timetuple())
            if row.get('_id') and len(row.get('contacts')) > 0:
                if len(LastNotNUll_contact) == 0 or time.strftime("%Y-%m-%d %H:%M:%S", LastNotNUll_contact.get(
                        '_id').generation_time.timetuple()) < row_time:
                    LastNotNUll_contact = row
                if len(FirstNotNUll_contact) == 0 or time.strftime("%Y-%m-%d %H:%M:%S", FirstNotNUll_contact.get(
                        '_id').generation_time.timetuple()) > row_time:
                    FirstNotNUll_contact = row
        if not LastNotNUll_contact and not FirstNotNUll_contact:
            return self.SET_DEFAULT_VALUE_INT_9999999
        return round(float(len(LastNotNUll_contact.get('contacts'))) / float(len(FirstNotNUll_contact.get('contacts'))), 4)

    def rule_contact_valid_phone_cnt(self):
        """rule_contact_valid_phone_cnt 通讯录有效电话号码个数（去重）"""
        data = self.mongo.query_by_user_id('lake', "s_user_mobile_contact_{0}".format(self.info.user_id%4),
                                           {"user_id": int(self.user_id)})
        phoneList = []
        if len(data) <= 0:
            return self.SET_DEFAULT_VALUE_INT_9999999
        dataNew = data[0]
        for line in dataNew['contacts']:
            phone1 = phoneValid(line.get('phone1'))
            if phone1 not in phoneList and phone1 :
                phoneList.append(phone1)
            phone2 = phoneValid(line.get('phone2'))
            if phone2 not in phoneList and phone2 :
                phoneList.append(phone2)
            phone3 = phoneValid(line.get('phone3'))
            if phone3 not in phoneList and phone3 :
                phoneList.append(phone3)
        return len(phoneList)

    def rule_distinct_valid_phone_city_cnt(self):
        """rule_distinct_valid_phone_city_cnt 通讯录有效电话号码的不同城市归属地数量"""
        data = self.mongo.query_by_user_id('lake', "s_user_mobile_contact_{0}".format(int(self.user_id) % 4),
                                           {"user_id": int(self.user_id)})

        phoneList = []
        if len(data) <= 0:
            return self.SET_DEFAULT_VALUE_INT_9999999
        dataNew = data[0]
        for line in dataNew['contacts']:
            phone1 = phoneValid(line.get('phone1'))
            if phone1 not in phoneList and phone1:
                phoneList.append(phone1)
            phone2 = phoneValid(line.get('phone2'))
            if phone2 not in phoneList and phone2 :
                phoneList.append(phone2)
            phone3 = phoneValid(line.get('phone3'))
            if phone3 not in phoneList and phone3:
                phoneList.append(phone3)
        citylist = []
        for i in phoneList:
            sql = "select * from dict_mobile_location where mobile = '%s';" % i[:7]
            result = self.mysql.queryall_by_customer_id('skynet', sql)
            if len(result) > 0 and result[0]['city'] not in citylist and result[0]['city']:
                citylist.append(result[0]['city'])
        return len(citylist)

    def contact_phone_distinct_cnt(self):
        """contact_phone_distinct_cnt 通讯录手机号码数量"""
        data = self.mongo.query_by_user_id(db='lake',
                                           collection="s_user_mobile_contact_{0}".format(self.info.user_id % 4),
                                           find={'user_id': self.info.user_id})
        if not data:
            return self.SET_DEFAULT_VALUE_INT_9999999
        contact_num_list = []
        last_one = data[0]
        if not last_one.get('contacts'):
            return 0

        for contact in last_one['contacts']:
            phone1 = contact.get('phone1')
            phone2 = contact.get('phone2')
            phone3 = contact.get('phone3')

            phone1 = phoneClear(phone1)
            phone2 = phoneClear(phone2)
            phone3 = phoneClear(phone3)

            phone1 = phone_clean(phone1)
            phone2 = phone_clean(phone2)
            phone3 = phone_clean(phone3)

            if phone1 and phone1 not in contact_num_list: contact_num_list.append(phone1)
            if phone2 and phone2 not in contact_num_list: contact_num_list.append(phone2)
            if phone3 and phone3 not in contact_num_list: contact_num_list.append(phone3)

        return len(contact_num_list)

    def applistScore(self):
        """applistScore 手机applist得分"""
        list_app =[]
        appList = ""
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_app_list_{0}".format(int(self.info.user_id) % 4),
                                                        serial_no=self.serial_no,
                                                        find={"user_id": int(self.info.user_id)},
                                                        start_days=30,
                                                        start_time="00:00:00",
                                                        end_days=0)
        if not result:
            return self.SET_DEFAULT_VALUE_INT_9999999
        for data in result:
            for app in data.get('mobileApp'):
                list_app.append(app.get('appName'))
        list_app = list(set(list_app))
        for i in list_app:
           appList = appList + i + "|"
        return appList

    def __getProv(self,phone):
        sql = "select * from dict_mobile_location where mobile = '%s';" % str(phone)[:7]
        result = self.mysql.queryall_by_customer_id('skynet', sql)
        if not result:
            return 0
        else:
            return result[0].get('province')

    def contactComnProvMobileCnt(self):
        """contactComnProvMobileCnt 立即贷IOS设备，通讯录中与本人手机号省份归属地相同的手机号码数"""
        list1 = []
        list2 =[]
        user_List=[]
        count = 0
        result = self.mongo.query_all_by_userId_inXdays(  db='lake',
                                                          collection="s_user_mobile_contact_{0}".format(int(self.info.user_id) % 4),
                                                          find={"user_id": int(self.info.user_id)},
                                                          serial_no=self.serial_no, start_days=30,
                                                          start_time='00:00:00', end_days=0)
        if not result:
            return  self.SET_DEFAULT_VALUE_INT_9999999
        self_phone_city = self.__getProv(self.info.phone)
        if not self_phone_city:
            return self.SET_DEFAULT_VALUE_INT_9999999
        for i in result:
            list2.append(i['contacts'])
        for a in list2:
            for i in a:
                del i['name']
                for k,v in i.items():
                    list1.append(v)
        list1=list(set(list1))
        for i in list1:
            if phoneClear(i):
                user_List.append(i)
        for i in user_List:
            conCity = self.__getProv(i)
            if conCity == self_phone_city:
                count += 1
        return count

    def callRecordCnt(self):
        """callRecordCnt 通话记录条数"""
        data = self.mongo.query_by_user_id(db='lake',
                                           collection="s_user_mobile_contact_action_{0}".format(int(self.info.user_id) % 4),
                                           find={"user_id": int(self.info.user_id)})
        if not data :
            return self.SET_DEFAULT_VALUE_INT_9999999
        if not data[0].get('actions'):
            return self.SET_DEFAULT_VALUE_INT_9999999
        return len(data[0].get('actions'))

    def earliestCallDays(self):
        """earliestCallDays 最早呼叫天数"""
        list2 = []
        list3 = []
        list5 = []
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_contact_{0}".format(
                                                            int(self.info.user_id) % 4),
                                                        find={"user_id": int(self.info.user_id)},
                                                        serial_no=self.serial_no, start_days=1000,
                                                        start_time='00:00:00', end_days=0)
        if not result or not result[0]['contacts']:
            return self.SET_DEFAULT_VALUE_INT_9999999
        else:
            list1 = result[0]['contacts']
            for i in list1:
                del i['name']
                for k,v in i.items():
                    list2.append(v)
            list2 = list(set(list2))
            for i in list2:
                i = phoneClean(i)
                if i:
                    list3.append(i)
        result1 = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_contact_action_{0}".format(
                                                            int(self.info.user_id) % 4),
                                                        find={"user_id": int(self.info.user_id)},
                                                        serial_no=self.serial_no, start_days=1000,
                                                        start_time='00:00:00', end_days=0)
        if not result1 or not result1[0]['actions']:
            return self.SET_DEFAULT_VALUE_INT_9999999
        else:
            list4 = result1[0]['actions']
            for i in list4:
                if i['callNumber'] in list3:
                    list5.append(i['callTime'])
            if not list5 :
                return self.SET_DEFAULT_VALUE_INT_9999995
            else:
                lastTime = min(list5)
                callDays = (self.info.event_time - lastTime).days
                return callDays

    def __contact(self,type='total'):
        contact_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                 collection="s_user_mobile_contact_{0}".format(
                                                                     int(self.info.user_id) % 4),
                                                                 find={"user_id": int(self.info.user_id)},
                                                                 serial_no=self.serial_no, start_days=29,
                                                                 start_time='00:00:00', end_days=1000)
        contact_list = []
        if not contact_results or len(contact_results) == 0:
            return self.SET_DEFAULT_VALUE_INT_9999999
        contacts=[]
        for row in contact_results:
            contacts=contacts+row.get('contacts')
        contact_list=contact_list+self.info.get_mobilephone_list_by_contacts_dict_by_NameAndPhone(contacts=contacts,type='phone')
        if type=='total':
            if len(contact_list) > 0:
                return contact_list
            else:
                return 0
        contact_phone_list=self.info.get_mobilephone_list_after_cleaned_not_dict(contact_list)
        if type=='phone':
            if len(contact_phone_list)>0:
                return contact_phone_list
            else:
                return 0
        name_list = contact_list + self.info.get_mobilephone_list_by_contacts_dict_by_NameAndPhone(contacts=contacts,type='name')
        if type=='name':
            if len(contact_list) > 0:
                return name_list
            else:
                return 0

    def contactComnCityMobileCnt(self):
        ''' contactComnCityMobileCnt  通讯录中与本人手机号城市归属地相同的手机号码数'''
        self_phone_city=self.info.get_mobile_location(self.info.phone)
        if not self_phone_city:
            return self.SET_DEFAULT_VALUE_INT_9999999
        contact_phone_list = self.__contact(type='phone')
        if contact_phone_list== self.SET_DEFAULT_VALUE_INT_9999999:
            return self.SET_DEFAULT_VALUE_INT_9999999
        if not contact_phone_list:
            return 0
        contact_phone_city_list=self.info.get_mobile_location_list_not_dict(contact_phone_list)
        return contact_phone_city_list.count(self_phone_city)


    def deviceImeiCityApplyCnt(self):
        """deviceImeiCityApplyCnt 使用同一设备（imei）且在同一城市客户数，90天内借款成功的客户数"""
        data = self.mongo.query_by_user_id('lake',
                                            "s_user_mobile_device_info_{0}".format(self.info.user_id%4),
                                            {"user_id": self.user_id, "device_type":2})
        if not data or not data[0].get('imei', None):
            return self.SET_DEFAULT_VALUE_INT_9999999
        imei = data[0].get('imei')
        sql = "SELECT * FROM home_info_%s where customer_id = '%s' " % (self.ljd_customer_id % 20, self.ljd_customer_id)
        result = self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
        if not result:
            home_city = ''
        else:
            home_city = result['home_city']
        result = self.mongo.queryall_by_table('lake', "s_user_mobile_device_info_{0}", {"imei": imei})
        user_ids = list(set([str(data['user_id']) for data in result]))
        #TODO 如果同设备使用超过1000人，直接返回-9999997
        if len(user_ids)>=1000:
            return self.SET_DEFAULT_VALUE_INT_9999997
        user_ids = ','.join(user_ids)
        #TODO 通过user_id 反查ljd customer_id
        sql = "SELECT * from customer where user_id in (%s)" % (user_ids)
        result = self.mysql.queryall_by_table_new_only('customer_center', sql)
        customer_ids = list(set([str(data['id']) for data in result]))
        # customer_ids = ','.join(customer_ids)
        #TODO 查询同一城市的cid
        customer_city_ids=[]
        for ids in customer_ids:
            sql="select * from home_info_{0} where customer_id='{1}' and home_city='{2}'".format(int(ids)%20,ids,home_city)
            result = self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
            if result:
                customer_city_ids.append(str(result['customer_id']))
        if not customer_city_ids:
            return 0
        customer_ids_string = ','.join(list(set(customer_city_ids)))
        #-----------------------------
        sql="SELECT id from customer WHERE user_id in (SELECT user_id from customer WHERE id in (%s))"%customer_ids_string
        result=self.mysql.queryall_by_table_new_only('customer_center',sql)
        customer_ids = list(set([str(data['id']) for data in result]))
        if not customer_ids:
            return 0
        customer_ids_string = ','.join(customer_ids)
        # -----------------------------
        #TODO 90天内动用过的所有customer_ids
        time90 = (self.info.event_time_add8h - datetime.timedelta(days=90)).strftime("%Y-%m-%d %H:%M:%S")
        sql = "SELECT * FROM order_history_{0} where order_status IN (106,110) and borrow_date >= '%s' and customer_id in (%s) " % (time90, customer_ids_string)
        result = self.mysql.queryall_by_table_new_only('loan_center', sql)
        customer_ids = list(set([str(data['customer_id']) for data in result]))
        #-------------------------------
        if not customer_ids:
            return 0
        customer_ids_string = ','.join(customer_ids)
        sql = "SELECT * from customer where id in (%s)" % (customer_ids_string)
        result = self.mysql.queryall_by_table_new_only('customer_center', sql)
        user_ids = list(set([str(data['user_id']) for data in result]))
        return len(user_ids)

    def device14imeiCityApplyCnt(self):
        """device14imeiCityApplyCnt 使用一设备（14位imei）且在同一城市客户数，90天内借款成功的客户数"""
        data = self.mongo.query_by_user_id('lake',
                                           "s_user_mobile_device_info_{0}".format(self.info.user_id%4),
                                           {"user_id": self.user_id, 'device_type':2})

        # print data
        if not data or not data[0].get('imei', None):
            return self.SET_DEFAULT_VALUE_INT_9999999
        imei = data[0].get('imei')
        if len(imei) != 14:
            return self.SET_DEFAULT_VALUE_INT_9999999
        sql = "SELECT * FROM home_info_%s where customer_id = '%s' " % (self.ljd_customer_id % 20, self.ljd_customer_id)
        result = self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
        if not result:
            home_city = ''
        else:
            home_city = result['home_city']
        result = self.mongo.queryall_by_table('lake', "s_user_mobile_device_info_{0}", {"imei": imei})
        user_ids = list(set([str(data['user_id']) for data in result]))
        #TODO 如果同设备使用超过1000人，直接返回-9999997
        if len(user_ids)>=1000:
            return self.SET_DEFAULT_VALUE_INT_9999997
        user_ids = ','.join(user_ids)
        #TODO 通过user_id 反查ljd customer_id
        sql = "SELECT * from customer where user_id in (%s)" % (user_ids)
        result = self.mysql.queryall_by_table_new_only('customer_center', sql)
        customer_ids = list(set([str(data['id']) for data in result]))
        # customer_ids = ','.join(customer_ids)
        #TODO 查询同一城市的cid
        customer_city_ids=[]
        for ids in customer_ids:
            sql="select * from home_info_{0} where customer_id='{1}' and home_city='{2}'".format(int(ids)%20,ids,home_city)
            result = self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
            if result:
                customer_city_ids.append(str(result['customer_id']))
        if not customer_city_ids:
            return 0
        customer_ids_string = ','.join(list(set(customer_city_ids)))
        #-----------------------------
        sql="SELECT id from customer WHERE user_id in (SELECT user_id from customer WHERE id in (%s))"%customer_ids_string
        result=self.mysql.queryall_by_table_new_only('customer_center',sql)
        customer_ids = list(set([str(data['id']) for data in result]))
        if not customer_ids:
            return 0
        customer_ids_string = ','.join(customer_ids)
        # -----------------------------
        #TODO 90天内动用过的所有customer_ids
        time90 = (self.info.event_time_add8h - datetime.timedelta(days=90)).strftime("%Y-%m-%d %H:%M:%S")
        sql = "SELECT * FROM order_history_{0} where order_status IN (106,110) and borrow_date >= '%s' and customer_id in (%s) " % (time90, customer_ids_string)
        result = self.mysql.queryall_by_table_new_only('loan_center', sql)
        customer_ids = list(set([str(data['customer_id']) for data in result]))
        #-------------------------------
        if not customer_ids:
            return 0
        customer_ids_string = ','.join(customer_ids)
        sql = "SELECT * from customer where id in (%s)" % (customer_ids_string)
        result = self.mysql.queryall_by_table_new_only('customer_center', sql)
        user_ids = list(set([str(data['user_id']) for data in result]))
        return len(user_ids)

    def deviceIfaCityApplyCnt(self):
        """deviceIfaCityApplyCnt 使用同一设备（ifa）且在同一城市，90天内借款成功的客户数"""
        # 取到用户的最新一条有idfa的数据
        data = self.mongo.query_by_user_id('lake', "s_user_mobile_device_info_{0}".format(self.info.user_id%4),
                                           {"customer_id": self.info.customer_id, 'device_type':1})
        if not data or not data[0].get('idfa', None):
            return self.SET_DEFAULT_VALUE_INT_9999999
        idfa = data[0].get('idfa')
        sql = "SELECT * FROM home_info_%s where customer_id = '%s' " % (self.ljd_customer_id % 20, self.ljd_customer_id)
        result = self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
        if not result:
            home_city = ''
        else:
            home_city = result['home_city']
        result = self.mongo.queryall_by_table('lake', "s_user_mobile_device_info_{0}", {"idfa": idfa})
        user_ids = list(set([str(data['user_id']) for data in result]))
        #TODO 如果同设备使用超过1000人，直接返回-9999997
        if len(user_ids)>=1000:
            return self.SET_DEFAULT_VALUE_INT_9999997
        user_ids = ','.join(user_ids)
        #TODO 通过user_id 反查ljd customer_id
        sql = "SELECT * from customer where user_id in (%s)" % (user_ids)
        result = self.mysql.queryall_by_table_new_only('customer_center', sql)
        customer_ids = list(set([str(data['id']) for data in result]))
        # customer_ids = ','.join(customer_ids)
        #TODO 查询同一城市的cid
        customer_city_ids=[]
        for ids in customer_ids:
            sql="select * from home_info_{0} where customer_id='{1}' and home_city='{2}'".format(int(ids)%20,ids,home_city)
            result = self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
            if result:
                customer_city_ids.append(str(result['customer_id']))
        if not customer_city_ids:
            return 0
        customer_ids_string = ','.join(list(set(customer_city_ids)))
        #-----------------------------
        sql="SELECT id from customer WHERE user_id in (SELECT user_id from customer WHERE id in (%s))"%customer_ids_string
        result=self.mysql.queryall_by_table_new_only('customer_center',sql)
        customer_ids = list(set([str(data['id']) for data in result]))
        if not customer_ids:
            return 0
        customer_ids_string = ','.join(customer_ids)
        # -----------------------------
        #TODO 90天内动用过的所有customer_ids
        time90 = (self.info.event_time_add8h - datetime.timedelta(days=90)).strftime("%Y-%m-%d %H:%M:%S")
        sql = "SELECT * FROM order_history_{0} where order_status IN (106,110) and borrow_date >= '%s' and customer_id in (%s) " % (time90, customer_ids_string)
        result = self.mysql.queryall_by_table_new_only('loan_center', sql)
        customer_ids = list(set([str(data['customer_id']) for data in result]))
        #-------------------------------
        if not customer_ids:
            return 0
        customer_ids_string = ','.join(customer_ids)
        sql = "SELECT * from customer where id in (%s)" % (customer_ids_string)
        result = self.mysql.queryall_by_table_new_only('customer_center', sql)
        user_ids = list(set([str(data['user_id']) for data in result]))
        return len(user_ids)

    def device_imei_city_apply_cnt(self):
        """device_imei_city_apply_cnt 使用同一设备（imei）且在同一城市客户数，90天内借款成功的客户数"""
        return self.deviceImeiCityApplyCnt()

    def device_14imei_city_apply_cnt(self):
        """device_14imei_city_apply_cnt 使用一设备（14位imei）且在同一城市客户数，90天内借款成功的客户数"""
        return self.device14imeiCityApplyCnt()

    def device_ifa_city_apply_cnt(self):
        """device_ifa_city_apply_cnt 使用同一设备（ifa）且在同一城市，90天内借款成功的客户数"""
        return self.deviceIfaCityApplyCnt()

    def device_android_root(self):
        """device_android_root 用户申请时安卓手机设备是否已经越狱"""
        data = self.mongo.query_by_user_id('lake', "s_user_mobile_device_info_{0}".format(self.info.user_id%4),
                                           {"user_id": self.user_id, "device_type": 2})
        if len(data) == 0:
            return self.SET_DEFAULT_VALUE_INT_9999999
        return data[0]['root']

    def device_root(self):
        """device_root 用户申请时手机设备是否已经越狱"""
        data = self.mongo.query_by_user_id('lake', "s_user_mobile_device_info_{0}".format(self.info.user_id%4),
                                           {"user_id": self.user_id})
        if len(data) == 0:
            return self.SET_DEFAULT_VALUE_INT_9999999
        return data[0]['root']

    def device_ios_root(self):
        """device_ios_root 用户申请时苹果手机设备是否已经越狱"""
        data = self.mongo.query_by_user_id('lake', "s_user_mobile_device_info_{0}".format(self.info.user_id%4),
                                           {"user_id": self.user_id, "device_type": 1})
        if len(data) == 0:
            return self.SET_DEFAULT_VALUE_INT_9999999
        return data[0]['root']

    def call_rela_cnt(self):
        """call_rela_cnt 申请客户与三个联系人通话次数"""
        callList = []
        callTimeList = []
        count = 0
        sql = "select * from customer_contacts_{0} where customer_id =%s " % self.customer_id
        res = self.mysql.queryone_table("customer_center", sql, self.customer_id)
        for i in res:
            callList.append(i['contact_mobilephone'])
        data = self.mongo.query_by_user_id_180days('lake', "s_user_mobile_contact_action_{0}".format(self.info.user_id%4),
                                                   {"user_id": self.user_id}, self.serial_no)
        if not data:
            return self.SET_DEFAULT_VALUE_INT_9999999
        for everyId in data:
            for line in everyId['actions']:
                if line["callNumber"] in callList and line["callDuration"] != 0 and line['callTime'] not in callTimeList:
                    callTimeList.append(line['callTime'])
                    count = count + 1
        return count

    def contact_blacklist_cnt(self):
        """contact_blacklist_cnt 客户申请借款前，客户通讯录中联系人在黑名单的人数"""
        data = self.mongo.query_by_user_id_30days('lake', "s_user_mobile_contact_{0}".format(self.info.user_id%4),
                                                  {"user_id": self.user_id}, self.serial_no)
        if not data:
            return self.SET_DEFAULT_VALUE_INT_9999999
        contact_num_list = []
        for contacts in data:
            for contact in contacts['contacts']:
                phone1 = contact.get('phone1')
                phone2 = contact.get('phone2')
                phone3 = contact.get('phone3')

                phone1 = phoneClean(phone1)
                phone2 = phoneClean(phone2)
                phone3 = phoneClean(phone3)

                if phone1 and phone1 not in contact_num_list: contact_num_list.append(phone1)
                if phone2 and phone2 not in contact_num_list: contact_num_list.append(phone2)
                if phone3 and phone3 not in contact_num_list: contact_num_list.append(phone3)

        contact_num_list = list(set(contact_num_list))
        sql = "select id from s_user where mobilephone in ('%s')" % ("','".join(contact_num_list))
        result = self.mysql.queryall_by_customer_id("xinyongjin", sql)
        uid_list = [str(tmp['id']) for tmp in result]
        if len(uid_list) == 0:
            return self.SET_DEFAULT_VALUE_INT_9999999

        sql = "select user_id from all_fin_rownumber where rank=1 and late_days>30 and user_id in (%s) " % (",".join(uid_list))
        res = self.mysql.queryall_by_customer_id("skynet_fact_material", sql)
        return len(res)

    def userinfo_diff_unitname_cnt(self):
        """userinfo_diff_unitname_cnt 同一单位电话对应不同单位名称的客户数"""
        sql = "SELECT * FROM work_info_%s where customer_id = '%s'" % (self.info.customer_id%20, self.info.customer_id)
        result = self.mysql.queryone_by_customer_id('customer_center', sql)
        if not result:
            return self.SET_DEFAULT_VALUE_INT_9999999
        try:
            units_phone = result['units_phone']
            units_name = result['units_name']
            units_city = result['units_city']
        except:
            return self.SET_DEFAULT_VALUE_INT_9999999
        time90 = (self.info.event_time_add8h - datetime.timedelta(days=90)).strftime("%Y-%m-%d %H:%M:%S")
        sql = "SELECT * FROM order_history_{0} where order_status IN (106,110) and borrow_date >= '%s' " % time90
        result = self.mysql.queryall_by_table('loan_center', sql)
        customer_ids = list(set([str(data['customer_id']) for data in result]))
        customer_ids = ','.join(customer_ids)
        sql = "SELECT * from work_info_{0} where customer_id in (%s) and units_phone='%s' and units_city ='%s' and  units_name != '%s'" % (
            customer_ids, units_phone, units_city, units_name)
        result = self.mysql.queryall_by_table('customer_center', sql)
        return len(result)

    def userinfo_same_unitname_apply_cnt(self):
        """userinfo_same_unitname_apply_cnt 近30天内用同单位名称申请的客户数"""
        sql = "SELECT * FROM work_info_%s where customer_id = '%s'" % (self.info.customer_id%20, self.customer_id)
        result = self.mysql.queryone_by_customer_id('customer_center', sql)
        try:
            units_name = result['units_name']
        except:
            return self.SET_DEFAULT_VALUE_INT_9999999
        time30 = (self.info.event_time_add8h - datetime.timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
        sql = "SELECT * FROM order_history_{0} where order_status IN (106,110) and borrow_date >= '%s' " % time30
        result = self.mysql.queryall_by_table('loan_center', sql)
        customer_ids = list(set([str(data['customer_id']) for data in result]))
        customer_ids = ','.join(customer_ids)
        if not customer_ids:
            return 0
        sql = "SELECT * from work_info_{0} where customer_id in (%s) and units_name = '%s'" % (customer_ids, units_name)
        result = self.mysql.queryall_by_table('customer_center', sql)
        return len(result)

    def userinfo_same_unitaddress_apply_cnt(self):
        """userinfo_same_unitaddress_apply_cnt 近30天内用同单位地址申请客户数"""
        sql = "SELECT * FROM work_info_%s where customer_id = '%s'" % (self.info.customer_id%20, self.customer_id)
        result = self.mysql.queryone_by_customer_id('customer_center', sql)
        try:
            units_address = result['units_address']
        except:
            return self.SET_DEFAULT_VALUE_INT_9999999
        time30 = (self.info.event_time_add8h - datetime.timedelta(days=30)).strftime("%Y-%m-%d %H:%M:%S")
        sql = "SELECT * FROM order_history_{0} where order_status IN (106,110) and borrow_date >= '%s' " % time30
        result = self.mysql.queryall_by_table('loan_center', sql)
        customer_ids = list(set([str(data['customer_id']) for data in result]))
        customer_ids = ','.join(customer_ids)
        if not customer_ids:
            return 0
        sql = "SELECT * from work_info_{0} where customer_id in (%s) and units_address = '%s'" % (customer_ids, units_address)
        result = self.mysql.queryall_by_table('customer_center', sql)
        return len(result)

    def ruleContactMax5RegisteCnt(self):
        """ruleContactMax5RegisteCnt 通话记录次数最多的5个手机号码的注册人数"""
        phoneMax5=self.mongo.query_phone_max5_beforeEvenTime_inXdays(db='lake',
                                                                     collection="s_user_mobile_contact_action_{0}".format(int(self.user_id) % 4),
                                                                     find={"user_id": int(self.user_id)},
                                                                     serial_no=self.serial_no,
                                                                     days=30)
        if phoneMax5=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        phonelist = []
        for phone in phoneMax5:
            sql = "select mobilephone from s_user where mobilephone ='%s'"%phone
            result = self.mysql.queryall_by_customer_id('xinyongjin', sql)
            for ph in result:
                phonelist.append(ph.get('mobilephone'))
        for phone in phoneMax5:
            sql = "select mobilephone from `user` where mobilephone = '%s'"%factor_encrypt_identity(phone)
            result = self.mysql.queryall_by_customer_id('customer_center', sql)
            for ph in result:
                phonelist.append(factor_decrypt_identity(ph.get('mobilephone')))
        return len(list(set(phonelist)))

    def rule_contact_max5_registe_cnt(self):
        """ruleContactMax5RegisteCnt 通话记录次数最多的5个手机号码的注册人数"""
        phoneMax5=self.mongo.query_phone_max5_beforeEvenTime_inXdays(db='lake',
                                                                     collection="s_user_mobile_contact_action_{0}".format(int(self.user_id) % 4),
                                                                     find={"user_id": int(self.user_id)},
                                                                     serial_no=self.serial_no,
                                                                     days=30,
                                                                     validTime=self.info.event_time_add8h-datetime.timedelta(days=180))
        if phoneMax5=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        phonelist = []
        for phone in phoneMax5:
            sql = "select mobilephone from s_user where mobilephone ='%s'"%phone
            result = self.mysql.queryall_by_customer_id('xinyongjin', sql)
            for ph in result:
                phonelist.append(ph.get('mobilephone'))
        for phone in phoneMax5:
            sql="select mobilephone from user where mobilephone='%s' and delete_flag=0"%factor_encrypt_identity(phone)
            result =self.mysql.queryone_by_customer_id_sxj('customer_center', sql)
            if result:
                phonelist.append(phone)
        return len(list(set(phonelist)))

    def appNameRecoveryCnt(self):
        """appNameRecoveryCnt APP名称命是回收类"""
        AppList = self.mongo.query_app_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_app_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=30)
        if AppList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        recover_app=u"闪回收|回租宝|马上回收|乐回租|派派回收|天天回租|简单回收|米多多回收|趣回购|牛牛回租|小猪回收|即速回收|随意回收|回购51|悠回收|美丽回购|极速回收|优麦回收|秒回收|蚂蚁回租|帮帮回租|51回购|风水回收|51回收|91回收|麻利回收|极速回购|快快回收|米米回收|租租白卡|爱租机|瓜牛租赁|趣租租"
        recover_app_list=recover_app.split('|')
        count=0
        for app in AppList:
            for rec in recover_app_list:
                if rec in app:
                    count+=1
                    break
        return count

    def appNameGambleCnt(self):
        """appNameGambleCnt APP名称命涉赌"""
        AppList = self.mongo.query_app_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_app_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=30)
        if AppList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        dubo_app=u"澳门赌场|澳门永利|澳门金沙|澳门百家乐|澳门太阳城|澳门巴黎人|澳门新葡京赌场|银河娱乐城|99娱乐城|领逸娱乐|梦幻娱乐城|皇冠娱乐|乐盛娱乐城|银钻娱乐|易彩娱乐|LG娱乐|腾龙娱乐|威尼斯人娱乐|運盛娱乐|全民娱乐中心|大发娱乐场|和记娱乐|天天娱乐|必赢娱乐|澳门威尼斯人娱乐城|星辰娱乐城|汇添富娱乐|云顶娱乐|千金城娱乐|亚博娱乐|新葡京娱乐场|夕立娱乐|荣耀娱乐城|金贝娱乐|千禧娱乐城|九九娱乐|新葡京娱乐|无极娱乐"
        dubo_app_list=dubo_app.split('|')
        count=0
        for app in AppList:
            for dub in dubo_app_list:
                if dub in app:
                    count+=1
                    break
        return count


    def appNameYellowCnt(self):
        """appNameYellowCnt APP名称命涉黄"""
        AppList = self.mongo.query_app_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_app_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=30)
        if AppList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        huangse_app=u"蜜桃约会|云约|约钱|同城语聊约会|附近约单|同城约会|附近语音约会|同城快约|同城嗨聊|附近涩聊"
        huangse_app_list=huangse_app.split('|')
        count=0
        for app in AppList:
            for huangs in huangse_app_list:
                if huangs in app:
                    count+=1
                    break
        return count


    def __get_smsOverdueDays(self,space_days):
        smsList = self.mongo.query_sms_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_sms_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=90)
        if smsList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        sms_list=[]
        for sms in smsList:
            if (return_strfYmd_date(self.info.event_time_add8h)-return_strfYmd_date(datetime.datetime.utcfromtimestamp(float(sms.get('date'))/1000))).days<=space_days:
                sms_list.append(sms.get('smsBody').encode('UTF8'))
        total_smsoverdue_Org=[]
        for sms in sms_list:
            if re.search('已逾期',sms) or  re.search('已经逾期',sms) or re.search(r'已逾\d|\s期',sms) or re.search(r'已经逾\d|\s期',sms):
                # print sms
                if re.findall('\【(.*?)\】', sms):
                    total_smsoverdue_Org.append(re.findall('\【(.*?)\】', sms)[0])
        return len(list(set(total_smsoverdue_Org)))

    def smsOverdueOrgl7daysCnt(self):
        """smsOverdueOrgl7daysCnt 近7天内短信内容出现的"已逾期"或"已经逾期"的不同机构数"""
        return self.__get_smsOverdueDays(space_days=6)

    def smsOverdueOrgl31daysCnt(self):
        """smsOverdueOrgl31daysCnt 近31天内短信内容出现的"已逾期"或已经逾期的不同机构数"""
        return self.__get_smsOverdueDays(space_days=30)

    def __get_smsOverduecourt(self,factor):
        smsList = self.mongo.query_sms_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_sms_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=90)
        if smsList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        sms_list=[]
        total_smsoverdue_Org=[]
        for sms in smsList:
            sms_list.append(sms.get('smsBody').encode('UTF8'))
        if factor=="smsOverduecourtOrgCnt":
            for sms in sms_list:
                if (re.search('法院', sms) or re.search('起诉', sms)) and (re.search('还款', sms) or re.search('逾期', sms) or re.search(r'逾\d|\s期', sms)):
                    if re.findall('\【(.*?)\】', sms):
                        total_smsoverdue_Org.append(re.findall('\【(.*?)\】', sms)[0])

        if factor=="smsOverdueArrearOrgCnt":
            for sms in sms_list:
                if re.search('严重逾期', sms) or re.search('恶意欠款', sms) or re.search('恶意拖欠', sms) or re.search(r'严重逾\d|\s期', sms):
                    if re.findall('\【(.*?)\】', sms):
                        total_smsoverdue_Org.append(re.findall('\【(.*?)\】', sms)[0])

        if factor=="smsEvadeOrgCnt":
            for sms in sms_list:
                if re.search('关于报送借款人逃废债信息通知', sms):
                    if re.findall('\【(.*?)\】', sms):
                        total_smsoverdue_Org.append(re.findall('\【(.*?)\】', sms)[0])
        return len(list(set(total_smsoverdue_Org)))

    def smsOverduecourtOrgCnt(self):
        """smsOverduecourtOrgCnt 短信内容出现的"法院|起诉"且"还款|逾期"的不同机构数"""
        return self.__get_smsOverduecourt(factor="smsOverduecourtOrgCnt")

    def smsOverdueArrearOrgCnt(self):
        """smsOverdueArrearOrgCnt 短信内容出现的"严重逾期|恶意欠款|恶意拖欠"的不同机构数"""
        return self.__get_smsOverduecourt(factor="smsOverdueArrearOrgCnt")

    def smsEvadeOrgCnt(self):
        """smsEvadeOrgCnt 短信内容出现的"逃废债"的不同机构数"""
        return self.__get_smsOverduecourt(factor="smsEvadeOrgCnt")

    def callRecord7DaysCnt(self):
        """callRecord7DaysCnt 近7天通话记录数"""
        results=self.mongo.query_contact_action_list_beforeEvenTime_inXdays(db='lake',
                                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                                            find={"user_id":self.info.user_id},
                                                                            serial_no=self.serial_no,
                                                                            days=7)
        if results=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        return len(results)

    def callRecRtoCntNight(self):
        """callRecRtoCntNight 夜间通话次数占比  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_FLOAT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>=(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=179))]
        contact_action_list_clean_0_7=[action for action in contact_action_list_remove if int(action.get("callTime").strftime('%H')) in (0,1,2,3,4,5,6)]
        if not contact_action_list_clean_0_7:
            return self.SET_DEFAULT_VALUE_FLOAT_0
        return round(float(len(contact_action_list_clean_0_7))/len(contact_action_list_remove),4)

    def callRecRtoPhePOut(self):
        """callRecRtoPhePOut 仅呼出手机号占比  callType 1:呼入  2:呼出  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_FLOAT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=179))]
        contact_action_list_clean_phone = [phone_clean_new(phoneClear(action.get("callNumber"))) for action in contact_action_list_remove if phoneClear(action.get("callNumber")) and phone_clean_new(phoneClear(action.get("callNumber")))]
        contact_action_list_clean_callType_1 =[phone_clean_new(phoneClear(action.get("callNumber"))) for action in contact_action_list_remove if int(action.get("callType"))in(1,3,5,10) and phoneClear(action.get("callNumber")) and phone_clean_new(phoneClear(action.get("callNumber")))]
        if not contact_action_list_clean_phone or not contact_action_list_clean_callType_1:
            return self.SET_DEFAULT_VALUE_INT_0
        return round(float(len(list(set(contact_action_list_clean_phone)))-len(list(set(contact_action_list_clean_callType_1))))/len(list(set(contact_action_list_clean_phone))),4)

    def callRecMean7dCallCnt(self):
        """callRecMean7dCallCnt 近7天日均通话记录数   --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_FLOAT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=6))]
        return round(float(len(contact_action_list_remove))/7,4)

    def callRecMean30dCallCnt(self):
        """callRecMean30dCallCnt 近30天日均通话记录数   --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_FLOAT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=29))]
        return round(float(len(contact_action_list_remove))/30,4)

    def callRecCallAge(self):
        """callRecCallAge 通话跨度   --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_INT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=179))]
        contact_action_list_callTime=[action.get("callTime") for action in contact_action_list_remove]
        if not contact_action_list_callTime:
            return self.SET_DEFAULT_VALUE_INT_0
        return (return_strfYmd_date(max(contact_action_list_callTime)) - return_strfYmd_date(min(contact_action_list_callTime))).days

    def callRecCallCnt(self):
        """callRecCallCnt 总通话次数  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_INT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=179))]
        return len(contact_action_list_remove)

    def callRecRtoCntOut5s(self):
        """callRecRtoCntOut5s 呼出时长在5秒以内的呼出记录占总呼出记录的比例  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_FLOAT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]

        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>=(return_strfYmd_date(self.info.event_time_add8h)-datetime.timedelta(days=179))]
        contact_action_list_call_all=[action for action in contact_action_list_remove if int(action.get("callType"))==2]
        contact_action_list_call_5 = [action for action in contact_action_list_remove if int(action.get("callType"))==2 and action.get("callDuration")<=5]
        if not contact_action_list_call_all:
            return self.SET_DEFAULT_VALUE_FLOAT_9999998
        return round(float(len(contact_action_list_call_5))/len(contact_action_list_call_all),4)

    def callRecRtoCntOutNight(self):
        """callRecRtoCntOutNight 通话记录夜间呼出记录占总呼出记录的比例  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_FLOAT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(self.info.event_time_add8h-datetime.timedelta(days=179))]
        contact_action_list_call_all=[action for action in contact_action_list_remove if int(action.get("callType"))==2]
        contact_action_list_call_0_7 = [action for action in contact_action_list_remove if int(action.get("callType"))==2 and int(action.get("callTime").strftime('%H')) in (0,1,2,3,4,5,6)]
        if not contact_action_list_call_all:
            return self.SET_DEFAULT_VALUE_FLOAT_9999998
        return round(float(len(contact_action_list_call_0_7))/len(contact_action_list_call_all),4)

    def callRecRtoCntPheDura30(self):
        """callRecRtoCntPheDura30 通话跨度（最早通话时间和最晚通话时间间隔）>=30天的有效手机个数  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_INT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(self.info.event_time_add8h-datetime.timedelta(days=179))]
        contact_action_phone_dict={}
        for action in contact_action_list_remove:
            if phoneClear(action.get("callNumber")) and phone_clean_new(phoneClear(action.get("callNumber"))):
                if phone_clean_new(phoneClear(action.get("callNumber"))) not in contact_action_phone_dict.keys():
                    contact_action_phone_dict[str(phone_clean_new(phoneClear(action.get("callNumber"))))]=[action.get("callTime")]
                else:
                    contact_action_phone_dict[str(phone_clean_new(phoneClear(action.get("callNumber"))))].append(action.get("callTime"))
        contact_action_list_more_30=[i for i in contact_action_phone_dict.keys() if (return_strfYmd_date(max(contact_action_phone_dict.get(i)))-return_strfYmd_date(min(contact_action_phone_dict.get(i)))).days>=30]
        return len(contact_action_list_more_30)

    def callRecSilenceLongest(self):
        """callRecSilenceLongest 通话记录最大静默时长  --大王贷"""
        result_contact_action=self.mongo.query_by_user_id(  db='lake',
                                                            collection='s_user_mobile_contact_action_%d'%(int(self.info.user_id)%4),
                                                            find={'user_id':self.info.user_id})
        if not result_contact_action:
            return self.SET_DEFAULT_VALUE_INT_9999995
        contact_action_list=[action for action in result_contact_action[0].get("actions")]
        contact_action_list_remove=[]
        [contact_action_list_remove.append(action) for action in contact_action_list if action not in contact_action_list_remove and action.get("callTime")>(self.info.event_time_add8h-datetime.timedelta(days=179))]
        contact_action_list_silence=[action.get("callTime") for action in contact_action_list_remove]
        contact_action_list_silence.sort()
        contact_action_list_silence_time=[(return_strfYmd_date(contact_action_list_silence[i])-return_strfYmd_date(contact_action_list_silence[i-1])).days for i in range(1,len(contact_action_list_silence))]
        if not contact_action_list_silence_time:
            return self.SET_DEFAULT_VALUE_INT_9999995
        return max(contact_action_list_silence_time)

    def __get_contact_from_lake(self):
        result_contact =self.mongo.query_by_user_id(db='lake',
                                                    collection='s_user_mobile_contact_%d'%(int(self.info.user_id)%4),
                                                    find={'user_id':self.info.user_id})
        if not result_contact:
            return
        contact_list = [contact for contact in result_contact[0].get("contacts")]
        contact_list_all=[]
        for contact in contact_list:
            if contact.get("phone1") and [contact.get("phone1"),contact.get("name")] not in contact_list_all:
                contact_list_all.append([contact.get("phone1"),contact.get("name")])
            if contact.get("phone2") and [contact.get("phone2"), contact.get("name")] not in contact_list_all:
                contact_list_all.append([contact.get("phone2"), contact.get("name")])
            if contact.get("phone3") and [contact.get("phone3"), contact.get("name")] not in contact_list_all:
                contact_list_all.append([contact.get("phone3"), contact.get("name")])
        return contact_list_all

    def contactRelativesCnt(self):
        """contactRelativesCnt 通讯录【亲属联系人】关键词出现次数  --大王贷"""
        relatives=u"父、母、儿、女、叔、伯、舅、姑、姨、姐、妹、哥、弟、妻、岳父、岳母、甥、侄、爸、妈、爹、娘、老婆、配偶、爱人、老公、丈母、丈人、媳妇、外婆、外公、家、奶、爷、嫂、姥姥、姥爷、兄、宝"
        relatives_list=relatives.split(u'、')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in relatives_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactLoanCnt(self):
        """contactLoanCnt 通讯录【小贷机构】关键词出现次数  --大王贷"""
        loans=u"宜信，捷信，闪银，中银，北银，捷越，拍拍贷，宜人贷，平安易贷，玖富，你我贷，车主贷，陆金所，正融，中安贷款，众惠贷款，夸客金融，证大，中安信业，信而富，优分期，现金巴士，亲亲小贷，158金融，安信，百卡通，百信，佰诚，北京掌众，博民快易贷，博信，车抵押，驰融，持信，川商，代办，代还，代扣款，代收-中金支付其他费用，贷付宝，贷款，贷长线，贷中介，担保，点融，垫还，鼎久，东冠，放水，飞贷，富登，富乐，富联，富友代收，港贷，高贷，冠群驰聘，还钱，浩昌金融，合力，合拍在线，合盘贷，和信，河马在线，嗨钱，恒昌，恒昌贷款，恒诚科技，恒诚科技发展，恒瑞，花呗，华商贷，汇付天下，汇中财富，惠信，积木盒子，嘉银金融，捷贷，捷融，金宝盆，金和汇，金通，金信和担保，锦城，巨汇，客贷，夸氪金融，快汇宝，快钱，利信，联保，联合金融，六七配，民贷天下，民富，民间借贷，民信，南康金融，普惠，普惠快信，钱宝，钱海支付，钱来，欠债，人人贷，仁仁分期，融360急速贷款，融通，融宜，融资，闪电借款，上海诺亚，深圳金融联，盛华，水佬，速帮，随行付，随身贷，随心贷，泰和，套卡，天恒，天津策成，望洲，微额速达，维信，我来贷，武汉网贷，先还，现代金控，现用贷，小贷，心仪贷，鑫海融，信合，信和，信融，信通汇达，信用充值，信用卡还款，养卡，易宝贷，易贷网，翼龙贷，银管家，友信，友众信业，预借现金，誉达信恒，长河典当，证大投资，中安，中航，中汇，中腾信，中投国泰，中兴微贷，众财，还贷"
        loans_list=loans.split(u'，')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in loans_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactForgeCnt(self):
        """contactForgeCnt 通讯录【造假信息】关键词出现次数  --大王贷"""
        forges=u"代刷，PS去水印，印章，养卡，做流水，贷款技术，贷款技巧，网贷技术，网贷技巧，提额技术，提额技巧，信用卡资料，翻译征信，工资流水，电核，房产证外皮，土地使用证壳，户口本皮，PS修改，QQ加群技术，办证，超级资料，打卡工资服务，电话电核，电话转接，额度，改图，贷款攻略，卡神，刻章，抠图，流水工资，推荐码，网贷解读，我爱卡，下卡，信贷技巧，刷信用，信用满标"
        forges_list=forges.split(u'，')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in forges_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactDemandCnt(self):
        """contactDemandCnt 通讯录【借贷需求】关键词出现次数  --大王贷"""
        demands=u"普惠，快信，掌钱便民缴费，钱袋宝，富友，快钱，飞钱，深圳年年卡，北京掌众，快汇宝，乐刷POS，联动优势，易宝支付，新生，大额，财付通代充，网易宝代充，代充，宝付，汇潮，钱富宝，银盛，深圳壹卡会，连连银通，乐刷，帮付通，手机POS，刷卡机，学习卡，华智融，酷贝，深圳年年卡，拍前联系，网校，盛付通代充，百付代充，钱富宝，即付宝，派钱，嗨趣，招财宝变现"
        demands_list=demands.split(u'，')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in demands_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactAgencyCnt(self):
        """contactAgencyCnt 通讯录【疑似中介】关键词出现次数  --大王贷"""
        agencys=u"POS机、POS、套现、办卡、养卡、大额、小额、高额、中介、抵押、公积金、信用卡、信贷、贷款、黑户、担保、呆账、代理、口子、白户、消费贷、中间人、还钱、拿钱、催收、高利贷、欠钱、跑路、网贷、黑白户、借款、申请资料、申请表、提额、代还、代办、高贷、小贷、民间借贷、空放、空套、小额放款、变现、套卡"
        agencys_list=agencys.split(u'、')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in agencys_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactCashCnt(self):
        """contactCashCnt 通讯录【疑惯性套现】关键词出现次数  --大王贷"""
        cashs=u"垫还、提额、典当"
        cashs_list=cashs.split(u'、')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in cashs_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactHabitCnt(self):
        """contactHabitCnt 通讯录【生活、消费习惯】关键词出现次数  --大王贷"""
        habits=u"到手、下线、大烟、大麻、操作、赌、按摩、酒吧、打牌、假证、戒赌、戒吧、高炮、K粉、催、老K、迷药"
        habits_list=habits.split(u'、')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in habits_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def contactFinancialCnt(self):
        """contactFinancialCnt 通讯录【类银行金融机构】关键词出现次数  --大王贷"""
        financials=u"华夏、兴业、交通、农业、建设、招商、平安、宜信、前海、宜人贷、中旬、广发、浦发、工商、光大、民生、中国银行、恒丰、邮政储蓄银行、银行、人人贷、拍拍贷、你我贷、证大、融360、亚联财、普惠、佰仟、金融、中信、中行、交行、农行、工行、建行、招行、捷信、深发、邮政储蓄"
        financials_list=financials.split(u'、')
        contact_list=self.__get_contact_from_lake()
        if not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999995
        count=0
        for contact in contact_list:
            for rel in financials_list:
                if re.findall(rel,contact[1]):
                    count+=1
                    break
        return count

    def deviceCreditPayUseCnt(self):
        """deviceCreditPayUseCnt测额到当前授信期间使用的设备总数"""
        decision_results = self.mongo.query_by_user_id(db='skynet',
                                                       collection="skynet_decision_result",
                                                       find={"user_id": int(self.info.user_id),
                                                             "product_code": "vip_loan",
                                                             "scene_code": "credit"})
        if not decision_results:
            return -9999999
        s_start_id=decision_results[-1].get('_id')
        s_end_id=ObjectId.from_datetime(self.info.event_time)
        device_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                collection="s_user_mobile_device_info_{0}".format(
                                                                    int(self.info.user_id) % 4),
                                                                find={"user_id": int(self.info.user_id)},
                                                                serial_no=self.serial_no, s_start_id=s_start_id,s_end_id=s_end_id)
        if not device_results:
            return 0
        device_list = []
        for r in device_results:
            device_ids = ''
            for field in ['idfa', 'imei', 'android_id', 'mac']:
                if r.get(field):
                    device_ids = device_ids + r.get(field)
            device_list.append(device_ids)
        return len(list(set(device_list)))

    def __device_info_by_days(self,days):
        device_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                collection="s_user_mobile_device_info_{0}".format(
                                                                    int(self.info.user_id) % 4),
                                                                find={"user_id": int(self.info.user_id)},
                                                                serial_no=self.serial_no, start_days=days,start_time="00:00:00")
        if not device_results:
            return 0#-9999999
        device_list=[]
        for r in  device_results:
            device_ids=''
            for field in ['idfa','imei','android_id','mac']:
                if r.get(field):
                    device_ids=device_ids+ r.get(field)
            device_list.append(device_ids)
        return len(list(set(device_list)))

    def deviceCredit3dUseCnt(self):
        """deviceCredit3dUseCnt测额前3天（包含当天），自然天，使用设备总数"""
        return self.__device_info_by_days(days=2)

    def __device_info_by_devicetype_ids(self,device_type,id_type,ids):
        #"device_type": device_type,
        user_id_list = []
        for i in range(0, 4):
            device_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                    collection="s_user_mobile_device_info_{0}".format(
                                                                        i),
                                                                    find={ id_type: ids},
                                                                    serial_no=self.serial_no, start_days=179,
                                                                    start_time="00:00:00")
            if device_results:
                for r in device_results:
                    user_id_list.append(r.get('user_id'))
        # print "user_ids",len(list(set(user_id_list))),list(set(user_id_list))
        return len(list(set(user_id_list)))
    def __device_info(self,id_type='all'):
        device_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                collection="s_user_mobile_device_info_{0}".format(
                                                                    int(self.info.user_id) % 4),
                                                                find={"user_id": int(self.info.user_id)},
                                                                serial_no=self.serial_no, start_days=1)
        if not device_results:
            return None
        idfa_list=[]
        imei_list=[]
        for r in device_results:
            if int(r.get('device_type'))==1:
                idfa_list.append(r.get('idfa'))
            if int(r.get('device_type'))==2:
                imei_list.append(r.get('imei'))
        if id_type.lower()=='idfa':
            return idfa_list
        if id_type.lower()=='imei':
            return imei_list
        if id_type.lower()=='all':
            return idfa_list+imei_list
    def __device_info_by_idtype_idslist(self,id_type,ids_list):
        cnt_list=[]
        if id_type.lower()=='idfa':
            device_type=1
        elif id_type.lower()=='imei':
            device_type=2
        else:
            device_type=0
        if not ids_list:
            return -9999999
        for ids in ids_list:
            cnt_list.append(self.__device_info_by_devicetype_ids(device_type=device_type,id_type=id_type,ids=ids))
        return max(cnt_list)
    def deviceImeiApplyCnt(self):
        """deviceImeiApplyCnt测额当天使用的安卓设备-最大共用人数"""
        id_type = 'imei'
        imei_list = self.__device_info(id_type=id_type)
        return self.__device_info_by_idtype_idslist(id_type=id_type, ids_list=imei_list)
    def deviceIfaApplyCnt(self):
        """deviceIfaApplyCnt测额当天使用的IDFA-最大共用人数"""
        # if not self.__device_info(id_type='all'):
        #     return -9999999
        id_type = 'idfa'
        idfa_list=self.__device_info(id_type=id_type)
        return self.__device_info_by_idtype_idslist(id_type=id_type,ids_list=idfa_list)
    def devicePay7dUseCnt(self):
        """devicePay7dUseCnt"买卡前7天（包含当天），自然天，使用设备总数"""
        return self.__device_info_by_days(days=6)
    def __get_APPList(self):
        if len(self.APPList)!=0:
            return True
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_app_list_{0}".format(
                                                            int(self.info.user_id) % 4), serial_no=self.serial_no,
                                                        find={"user_id": int(self.info.user_id)},
                                                        start_days=30)
        for row in result:
            for sub_row in row.get('mobileApp'):
                if sub_row not in self.APPList:
                    self.APPList.append(sub_row)
        if len(self.APPList)!=0:
            return True
        else:
            return False

    def __get_APP_Type_Detail_list(self):
        if len(self.APP_Type_Detail_list) != 0:
            return True
        self.APP_xjd = []
        self.APP_xyk = []
        f = open('D:\\VIPFactorCollect20170207\\apptype.csv', 'r')
        # f = open('F:\\input001.csv', 'r','utf-8')
        for row in f.readlines():
            type = row.split(',')[0]
            apppName = row.split(',')[1][:-1]
            self.APP_Type_Detail_list.append([type, apppName])
            if type == '现金贷':
                self.APP_xjd.append(apppName)
            if type == '信用卡':
                self.APP_xyk.append(apppName)
        self.APP_xjd = list(set(self.APP_xjd))
        self.APP_xyk = list(set(self.APP_xyk))
        if len(self.APP_Type_Detail_list) != 0:
            return True
        return False
    def total_appxjd_cnt(self):
        """total_appxjd_cnt 现金贷(取到的APP全部数据去重）"""
        if not self.__get_APPList():
            return -9999999
        if not self.__get_APP_Type_Detail_list():
            return -9999999
        total_appxjd_cnt=0
        for row in self.APPList:
            appName=row.get('appName').encode("UTF8")
            for row_d in self.APP_xjd:
                if appName==row_d:
                    total_appxjd_cnt+=1
        return total_appxjd_cnt
    def total_appxyk_cnt(self):
        """total_appxyk_cnt 信用卡(取到的APP全部数据去重）"""
        if not self.__get_APPList():
            return -9999999
        if not self.__get_APP_Type_Detail_list():
            return -9999999
        total_appxyk_cnt=0
        for row in self.APPList:
            appName=row.get('appName').encode("UTF8")
            for row_d in self.APP_xyk:
                if appName==row_d:
                    total_appxyk_cnt+=1
        return total_appxyk_cnt
    def contactNotMobilephoneCnt(self):
        """contactNotMobilephoneCnt非手机号数"""
        contact_list = self.__contact(type='total')
        if not contact_list or contact_list==  -9999999:
            return -9999999
        contact_list_dict=list(set(contact_list))
        contact_phone_list = self.__contact(type='phone')
        if not contact_phone_list or contact_phone_list==  -9999999:
            return len(contact_list_dict)
        contact_phone_list_dict = list(set(contact_phone_list))
        if contact_list_dict == -9999999:
            return -9999999
        if not contact_phone_list_dict or len(contact_phone_list_dict) == 0:
            return len(contact_list_dict)
        # print len(contact_list_dict)
        return len(contact_list_dict)-len(contact_phone_list_dict)

    def contactReletiveNicknameNum(self):
        ''' contactReletiveNicknameNum	通讯录中亲属联系人号码数'''
        contact_list = self.__contact(type='total')
        name_list = self.__contact(type='name')
        relatives_name_list = [u'岳父',u'岳母',u'爸',u'妈']
        if contact_list==-9999999 or not contact_list or len(contact_list)==0:
            return -9999999
        rela_cnt=0
        for name in name_list:
            for rela_name in relatives_name_list:
                if name.find(rela_name)!=-1:
                    rela_cnt+=1
                    break
        return rela_cnt
    def contactMaxProvConsistency(self):
        """contactMaxProvConsistency 通讯录中手机号码最多省份归属地与本人手机号归属地是否一致"""
        province = []
        province_dict = {}
        contact_mobilephone_list = self.__contact()
        if not contact_mobilephone_list or contact_mobilephone_list == -9999999:
            return -9999999
        if len(contact_mobilephone_list) == 0:
            return -9999999
        if len(self.info.phone) == 11:
            moble_location = self.info.get_mobile_location(self.info.phone, locatin_type='province')
        else:
            return -9999999
        for tel in contact_mobilephone_list:
            province.append(self.info.get_mobile_location(tel, locatin_type='province'))

        for i in province:
            if province.count(i) > 1:
                province_dict[i] = province.count(i)
        if sorted(province_dict.items(), key=lambda item: item[1])[-1][0] == moble_location:
            return 1
        else:
            return 0

    def __get_last_notNUll_contact(self):
        contact_list = []
        contact_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                 collection="s_user_mobile_contact_{0}".format(
                                                                     int(self.info.user_id) % 4),
                                                                 find={"user_id": int(self.info.user_id)},
                                                                 serial_no=self.serial_no,
                                                                 start_days=29,
                                                                 end_days=0,
                                                                 end_time='')
        if len(contact_results) == 0:
            return -9999999

        for unit in contact_results:
            contact_data = unit.get("contacts")
            for cont in contact_data:
                if 'phone1' in cont.keys() and {"phone": cont.get("phone1"),
                                                "name": cont.get("name")} not in contact_list:
                    contact_list.append({"phone": cont.get("phone1"), "name": cont.get("name")})
                if 'phone2' in cont.keys() and {"phone": cont.get("phone2"),
                                                "name": cont.get("name")} not in contact_list:
                    contact_list.append({"phone": cont.get("phone2"), "name": cont.get("name")})
                if 'phone3' in cont.keys() and {"phone": cont.get("phone2"),
                                                "name": cont.get("name")} not in contact_list:
                    contact_list.append({"phone": cont.get("phone3"), "name": cont.get("name")})
        # 开发确认不清洗数据
        # for contact in contact_list:
        #     if self.info.get_mobilephone_one_after_cleaned(contact.get("phone")):
        #         clear_contact_list.append(contact)
        return contact_list

    def contactFamilyNameNum(self):
        """contactFamilyNameNum 通讯录中父母联系人数"""
        count = 0
        result = self.__get_last_notNUll_contact()
        if result == -9999999:
            return -9999999
        if not result:
            return 0
        for unit in result:
            if re.search(u"爸", unit['name']):
                count += 1
            if re.search(u'妈', unit['name']):
                count += 1
        return count

    def __sms_result_days(self,factor):
        if not self.__get_smsList():
            return -9999999
        event_time=self.info.event_time_add8h
        event_time_before2 = datetime.datetime.strptime(str(event_time-datetime.timedelta(days=3))[0:10] +' '+'00:00:00', "%Y-%m-%d %H:%M:%S")
        if factor=='cashOrgin3dayCnt':
            total_smsoverdue_Org=[]
            for row in self.sms_list:
                sms_date=datetime.datetime.utcfromtimestamp(int(row.get('date'))/1000)
                if event_time_before2 <= sms_date <= event_time:
                    smsbody = row.get('smsBody').encode('UTF8')
                    for match_row in self.match_list:
                        if re.search('\【.*?\】', smsbody):
                            if re.search(match_row, re.findall('\【(.*?)\】', smsbody)[0]):
                            # if re.search(match_row, re.findall('(.*?)', smsbody)[0]):
                                total_smsoverdue_Org.append(re.findall('\【(.*?)\】', smsbody)[0])
                                break
            return len(set(total_smsoverdue_Org))
        if factor=='cashOrgout3dayCnt':
            total_smsoverdue_Org = []
            for row in self.sms_list:
                sms_date=datetime.datetime.utcfromtimestamp(int(row.get('date'))/1000)
                if sms_date <event_time_before2:
                    smsbody = row.get('smsBody').encode('UTF8')
                    for match_row in self.match_list:
                        if re.search('\【.*?\】', smsbody):
                            if re.search(match_row, re.findall('\【(.*?)\】', smsbody)[0]):
                                total_smsoverdue_Org.append(re.findall('\【(.*?)\】', smsbody)[0])
                                break
            return len(set(total_smsoverdue_Org))

    def __get_smsList(self):
        self.sms_list = []
        result=self.mongo.query_all_by_userId_inXdays(db='lake',
                                                      collection='s_user_mobile_sms_list_{0}'.format(int(self.info.user_id)%4),
                                                      serial_no=self.serial_no,find={"user_id":int(self.info.user_id)},
                                                      start_days=89,
                                                      start_time="00:00:00",
                                                      end_days=1000)
        for row in result:
            for sub_row in row.get('mobileSms'):
                if sub_row not in self.sms_list:
                    self.sms_list.append(sub_row)

        if len(self.sms_list)!=0:
            return True
        else:
            return False
    def __sms_result(self,factor):
        if not self.__get_smsList():
            return -9999999
        if factor=='overdueOrgCnt':
            total_smsoverdue_Org=[]
            for row in self.sms_list:
                smsbody = row.get('smsBody').encode('UTF8')
                for match_row in self.match_list_yuqi:
                    if re.search(match_row,smsbody):
                        if re.search('\【.*?\】',smsbody):
                            total_smsoverdue_Org.append(re.findall('\【(.*?)\】', smsbody)[0])
                            break
                        else:
                            total_smsoverdue_Org.append('')
            return len(set(total_smsoverdue_Org))
        if factor=='cashSmsCnt':
            total_smsoverdue_Cnt=0
            for row in self.sms_list:
                smsbody = row.get('smsBody').encode('UTF8')
                for match_row in self.match_list:
                    if re.search('\【.*?\】',smsbody):
                        if re.search(match_row,re.findall('\【(.*?)\】',smsbody)[0]):
                            total_smsoverdue_Cnt+=1
                            break
            return total_smsoverdue_Cnt
        if factor=='cashSmsRate':
            return len(self.sms_list)
    def get_smsList(self):
        if len(self.sms_list)!=0:
            return True
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_sms_list_{0}".format(
                                                            int(self.info.user_id) % 4), serial_no=self.serial_no,
                                                        find={"user_id": int(self.info.user_id)},
                                                        start_days=30, end_days=2000)
        for row in result:
            for sub_row in row.get('mobileSms'):
                if sub_row not in self.sms_list:
                    self.sms_list.append(sub_row)
        if len(self.sms_list)!=0:
            return True
        else:
            return False
    def overdueOrgCnt(self):
        """overdueOrgCnt 预期短信机构数"""
        return self.__sms_result('overdueOrgCnt')
    def cashSmsCnt(self):
        """cashSmsCnt 现金贷短信条数"""
        return self.__sms_result('cashSmsCnt')
    def cashSmsRate(self):
        """cashSmsRate 短信总条数"""
        return self.__sms_result('cashSmsRate')
    def cashOrgin3dayCnt(self):
        """cashOrgin3dayCnt 近3天现金贷公司数"""
        return self.__sms_result_days(factor='cashOrgin3dayCnt')
    def cashOrgout3dayCnt(self):
        """cashOrgout3dayCnt 三天前所有的现金贷公司数"""
        return self.__sms_result_days(factor='cashOrgout3dayCnt')
    def smsContainNameCnt(self):
        """smsContainNameCnt 包含客户姓名的短信条数"""
        smsbody = []
        count = 0
        # print self.info.user_name
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection='s_user_mobile_sms_list_{0}'.format(
                                                            int(self.info.user_id) % 4),
                                                        serial_no=self.serial_no,
                                                        find={"user_id": int(self.info.user_id)},
                                                        start_days=89,
                                                        start_time="00:00:00",
                                                        end_days=0,
                                                        end_time="16:35:30")
        if not result:
            return -9999999
        for unit in result:
            for sms in unit["mobileSms"]:
                if sms not in smsbody:
                    smsbody.append(sms)
        if not smsbody:
            return 0
        for sms in smsbody:
            if self.info.user_name in sms['smsBody']:
                count += 1
        return count
    def total_smsoverdue_cnt(self):
        """total_smsoverdue_cnt:逾期短信数(取到的短信数据去重）（取到了短信，逾期类短信未匹配到，记为0）"""
        if not self.__get_smsList():
            return -9999999
        total_smsoverdue_cnt=0
        for row in self.sms_list:
            smsbody = row.get('smsBody').encode('UTF8')
            match_list=['已经逾期','逾期款项','已逾期','当前逾期','已产生逾期','逾期已','存在逾期','未能按期','逾期时间',
                       '累计逾期','逾期将超','已处于逾期','继续逾期','逾期借款','逾期期限','现逾期','逾期欠款','逾期情况','有逾期']
            for match_row in match_list:
                if smsbody.find(match_row) != -1:
                    total_smsoverdue_cnt+=1
                    break
                if match_row==match_list[-1]:
                    if smsbody.find('逾期') != -1 and smsbody.find('逾期')<smsbody.find('天'):
                        total_smsoverdue_cnt += 1
                        break
        return total_smsoverdue_cnt

    def total_smsnotnull_cnt(self):
        """total_smsnotnull_cnt:匹配短信数(取到的短信全部数据去重）-机构名不为空的短信数"""
        if not self.get_smsList():
            return -9999999
        total_smsnotnull_cnt=0
        for row in self.sms_list:
            smsbody=row.get('smsBody').encode('UTF8')
            if smsbody.startswith("【"):
                if smsbody.find("】")!=-1:
                    total_smsnotnull_cnt+=1
                continue
            if smsbody.startswith("["):
                if smsbody.find("]")!=-1:
                    total_smsnotnull_cnt+=1
                continue
            if smsbody.endswith("]"):
                if smsbody.find("[")!=-1:
                    total_smsnotnull_cnt+=1
                continue
            if smsbody.endswith("】"):
                if smsbody.find("【")!=-1:
                    total_smsnotnull_cnt+=1
                continue
        return total_smsnotnull_cnt

    def contact(self,type='total'):
        contact_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                 collection="s_user_mobile_contact_{0}".format(
                                                                     int(self.info.user_id) % 4),
                                                                 find={"user_id": int(self.info.user_id)},
                                                                 serial_no=self.serial_no, start_days=29,
                                                                 start_time='00:00:00', end_days=1000)
        contact_list = []
        if not contact_results or len(contact_results) == 0:
            return -9999999
        contacts=[]
        for row in contact_results:
            contacts=contacts+row.get('contacts')
        contact_list=contact_list+self.info.get_mobilephone_list_by_contacts_dict_by_NameAndCleanedPhone(contacts=contacts,type='phone')
        if type=='total':
            if len(contact_list) > 0:
                return contact_list
            else:
                return 0
        contact_phone_list=self.info.get_mobilephone_list_after_cleaned_not_dict(contact_list)
        if type=='phone':
            if len(contact_phone_list)>0:
                return contact_phone_list
            else:
                return 0
        name_list = contact_list + self.info.get_mobilephone_list_by_contacts_dict_by_NameAndCleanedPhone(contacts=contacts,type='name')
        if type=='name':
            if len(contact_list) > 0:
                return name_list
            else:
                return 0

    def contactMobileRadio(self):
        ''' contactMobileRadio	通讯录中手机号码占比'''
        contact_list = self.contact(type='total')
        contact_phone_list = self.contact(type='phone')
        if contact_list == -9999999:
            return -9999999
        if not contact_list or len(contact_list) == 0:
            return -9999998
        if not contact_phone_list or len(contact_phone_list) == 0:
            return 0
        return round(float(len(contact_phone_list)) / len(contact_list), 4)

    def contactBadNameRadio(self):
        ''' contactBadNameRadio	通讯录中不良联系人号码数占比'''
        contact_list = self.contact(type='total')
        name_list=self.contact(type='name')
        bad_name_list=[u"贷",u"借",u"分期",u"催",u"套现",u"赌",u"毒"]
        if contact_list==-9999999:
            return -9999999
        if not contact_list or len(contact_list)==0:
            return -9999998
        bad_cnt=0
        for name in name_list:
            for bad_name in bad_name_list:
                if name.find(bad_name)!=-1:
                    bad_cnt+=1
                    break
        return round(float(bad_cnt) / len(contact_list), 4)

    def __get_device_result(self,factor):
        device_token_list=[]
        device_Ip=[]
        device_List_Cnt=self.mongo.query_all_by_userId_inXdays(db='lake',
                                                      collection='s_user_mobile_device_info_{0}'.format(int(self.info.user_id)%4),
                                                      serial_no=self.serial_no,find={"user_id":int(self.info.user_id)},
                                                      start_days=0,
                                                      start_time="00:00:00",
                                                      end_days=0)
        if not device_List_Cnt:
            return -9999999
        if factor=='device1dayCnt':
            for row in device_List_Cnt:
                if row.get('device_token') and row.get('device_token') not in device_token_list:
                    device_token_list.append(row.get('device_token'))
            return len(device_token_list)
        elif factor=='ipCnt':
            for row in device_List_Cnt:
                if row.get('ip') and row.get('ip') not in device_Ip:
                    device_Ip.append(row.get('ip'))
            return len(device_Ip)
    def device1dayCnt(self):
        """device1dayCnt 当天的设备数"""
        return self.__get_device_result(factor='device1dayCnt')
    def ipCnt(self):
        """ipCnt IP个数"""
        return self.__get_device_result(factor='ipCnt')

    def idcardThirdFifth(self):
        """idcardThirdFifth 身份证第三位和第五位，第三位在前"""
        return str(self.info.cert_id)[2]+","+str(self.info.cert_id)[4]

    def ifVillage(self):
        """ifVillage 是否是农村户籍"""
        result = self.mysql.queryone_by_customer_id(db='customer_center',
                                                               sql="select * from ocr_log_%s where customer_id='%s'" % (
                                                                   self.info.customer_id % 20, self.info.customer_id))
        if not result or not result.get("ocr_address"):
            return self.SET_DEFAULT_VALUE_INT_9999996
        if u'村' in result.get("ocr_address"):
            return self.SET_DEFAULT_VALUE_INT_1
        return self.SET_DEFAULT_VALUE_INT_0

    def smsRelativesCnt(self):
        """smsRelativesCnt 短信【亲属联系人】关键词出现次数"""
        relative=u"父、母、儿、女、叔、伯、舅、姑、姨、姐、妹、哥、弟、妻、岳父、岳母、甥、侄、爸、妈、爹、娘、老婆、配偶、爱人、老公、丈母、丈人、媳妇、外婆、外公、家、奶、爷、嫂、姥姥、姥爷、兄、宝"
        relativeList=relative.split("、")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in relativeList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsLoanCnt(self):
        """smsLoanCnt 短信【小贷机构】关键词出现次数"""
        org=u"宜信，捷信，闪银，中银，北银，捷越，拍拍贷，宜人贷，平安易贷，玖富，你我贷，车主贷，陆金所，正融，中安贷款，众惠贷款，夸客金融，证大，中安信业，信而富，优分期，现金巴士，亲亲小贷，158金融，安信，百卡通，百信，佰诚，北京掌众，博民快易贷，博信，车抵押，驰融，持信，川商，代办，代还，代扣款，代收-中金支付其他费用，贷付宝，贷款，贷长线，贷中介，担保，点融，垫还，鼎久，东冠，放水，飞贷，富登，富乐，富联，富友代收，港贷，高贷，冠群驰聘，还钱，浩昌金融，合力，合拍在线，合盘贷，和信，河马在线，嗨钱，恒昌，恒昌贷款，恒诚科技，恒诚科技发展，恒瑞，花呗，华商贷，汇付天下，汇中财富，惠信，积木盒子，嘉银金融，捷贷，捷融，金宝盆，金和汇，金通，金信和担保，锦城，巨汇，客贷，夸氪金融，快汇宝，快钱，利信，联保，联合金融，六七配，民贷天下，民富，民间借贷，民信，南康金融，普惠，普惠快信，钱宝，钱海支付，钱来，欠债，人人贷，仁仁分期，融360急速贷款，融通，融宜，融资，闪电借款，上海诺亚，深圳金融联，盛华，水佬，速帮，随行付，随身贷，随心贷，泰和，套卡，天恒，天津策成，望洲，微额速达，维信，我来贷，武汉网贷，先还，现代金控，现用贷，小贷，心仪贷，鑫海融，信合，信和，信融，信通汇达，信用充值，信用卡还款，养卡，易宝贷，易贷网，翼龙贷，银管家，友信，友众信业，预借现金，誉达信恒，长河典当，证大投资，中安，中航，中汇，中腾信，中投国泰，中兴微贷，众财，还贷"
        orgList=org.split("，")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in orgList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsForgeCnt(self):
        """smsForgeCnt 短信【造假信息】关键词出现次数"""
        fake=u"代刷，PS去水印，印章，养卡，做流水，贷款技术，贷款技巧，网贷技术，网贷技巧，提额技术，提额技巧，信用卡资料，翻译征信，工资流水，电核，房产证外皮，土地使用证壳，户口本皮，PS修改，QQ加群技术，办证，超级资料，打卡工资服务，电话电核，电话转接，额度，改图，贷款攻略，卡神，刻章，抠图，流水工资，推荐码，网贷解读，我爱卡，下卡，信贷技巧，刷信用，信用满标"
        fakeList=fake.split("，")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in fakeList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsDemandCnt(self):
        """smsDemandCnt 短信【借贷需求】关键词出现次数"""
        borrow=u"普惠，快信，掌钱便民缴费，钱袋宝，富友，快钱，飞钱，深圳年年卡，北京掌众，快汇宝，乐刷POS，联动优势，易宝支付，新生，大额，财付通代充，网易宝代充，代充，宝付，汇潮，钱富宝，银盛，深圳壹卡会，连连银通，乐刷，帮付通，手机POS，刷卡机，学习卡，华智融，酷贝，深圳年年卡，拍前联系，网校，盛付通代充，百付代充，钱富宝，即付宝，派钱，嗨趣，招财宝变现"
        borrowList=borrow.split("，")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in borrowList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsAgencyCnt(self):
        """smsAgencyCnt 短信【疑似中介】关键词出现次数"""
        org=u"POS机、POS、套现、办卡、养卡、大额、小额、高额、中介、抵押、公积金、信用卡、信贷、贷款、黑户、担保、呆账、代理、口子、白户、消费贷、中间人、还钱、拿钱、催收、高利贷、欠钱、跑路、网贷、黑白户、借款、申请资料、申请表、提额、代还、代办、高贷、小贷、民间借贷、空放、空套、小额放款、变现、套卡"
        orgList=org.split("、")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in orgList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsCashCnt(self):
        """smsCashCnt 短信【疑惯性套现】关键词出现次数"""
        money=u"垫还、提额、典当"
        moneyList=money.split("、")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in moneyList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsHabitCnt(self):
        """smsHabitCnt 短信【生活、消费习惯】关键词出现次数"""
        money=u"到手、下线、大烟、大麻、操作、赌、按摩、酒吧、打牌、假证、戒赌、戒吧、高炮、K粉、催、老K、迷药"
        moneyList=money.split("、")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in moneyList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def smsFinancialCnt(self):
        """smsFinancialCnt 短信【类银行金融机构】关键词出现次数"""
        money=u"华夏、兴业、交通、农业、建设、招商、平安、宜信、前海、宜人贷、中旬、广发、浦发、工商、光大、民生、中国银行、恒丰、邮政储蓄银行、银行、人人贷、拍拍贷、你我贷、证大、融360、亚联财、普惠、佰仟、金融、中信、中行、交行、农行、工行、建行、招行、捷信、深发、邮政储蓄"
        moneyList=money.split("、")
        smsResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_sms_list_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not smsResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        smsList=[]
        for sms in smsResult[0].get("mobileSms"):
            if sms not in smsList:
                smsList.append(sms)
        count=0
        for sms in smsList:
            for i in moneyList:
                if re.findall(i,sms.get("smsBody")):
                    count+=1
                    break
        return count

    def contactDetailRelativesCnt(self):
        """contactDetailRelativesCnt 通讯录【详细亲属联系人】关键词出现次数"""
        relative_all=u"祖父,祖母,爷,太奶,大奶,奶奶,外公,太公,老太公,大公,二公,叔公,三公,公公,阿公,家公,外婆,太婆,大婆,婆婆,阿婆,叔婆,姑婆,伯婆,姨婆,老太婆,家婆,嫲,姥姥,姥爷,姥爹,家家,爸,老头,妈,父,母,母亲,爹,娘,岳父,岳母,岳家,丈母娘,丈人,伯父,伯母,伯子,伯伯,大伯,二伯,三伯,四伯,五伯,伯公,阿伯,伯娘,叔子,爷叔,大叔,二叔,三叔,四叔,五叔,表叔,姨叔,叔叔,阿叔,叔仔,婶,姑,妗,舅,娘姨,姨夫,娘姨夫,大姨,二姨,三姨,四姨,五姨,小姨,表姨,姨子,姨妈,老公,老婆,媳妇,爱人,宝宝,宝贝,亲爱的,darling,honey,内人,家内,先生,妻,弟,家姐,大姐,二姐,三姐,四姐,五姐,姊夫,阿姊,小妹 ,大妹,二妹,三妹,四妹,五妹,大哥,二哥,三哥,四哥,五哥,小哥,老哥,亲哥,哥哥,阿哥,阿嫂,嫂嫂,嫂子,小嫂,大嫂,二嫂,三嫂,儿子,儿媳,女儿,女婿,甥,侄,大大,一大,二大,三大,四大,五大,阿大,堂哥,堂嫂,堂弟,堂姐,堂妹,堂兄,表兄,表哥,表嫂,表姐,表妹,表弟,表叔,表伯,表伯娘,表侄,表侄女,表姐夫,表妹夫,表姨丈,表姨妈,表姨,堂叔,堂伯,堂伯娘,堂侄,堂侄女,堂姐夫,堂妹夫,堂姨丈,堂姨妈,堂姨,孙子,孙女,连襟,妯娌,老豆,细佬,囡囡,仔仔,大佬,细妹,伢子,伢儿,丫头"
        relativeAllList=relative_all.split(",")
        contactResult=self.mongo.query_by_user_id(db='lake', collection='s_user_mobile_contact_%s'%int(self.info.user_id%4), find={"user_id":self.info.user_id})
        if not contactResult:
            return self.SET_DEFAULT_VALUE_INT_9999999
        contactList=[]
        for contact in contactResult[0].get("contacts"):
            if contact.get('phone1') and {'name':contact.get('name'),"phone":contact.get('phone1')} not in contactList:
                contactList.append({'name':contact.get('name'),"phone":contact.get('phone1')})
            if contact.get('phone2') and {'name':contact.get('name'),"phone":contact.get('phone2')} not in contactList:
                contactList.append({'name':contact.get('name'),"phone":contact.get('phone2')})
            if contact.get('phone3') and {'name':contact.get('name'),"phone":contact.get('phone3')} not in contactList:
                contactList.append({'name':contact.get('name'),"phone":contact.get('phone3')})
        count=0
        for contact in contactList:
            for i in relativeAllList:
                if re.findall(i,contact.get("name")):
                    count+=1
                    break
                if contact.get("name") in [u'奶',u'家',u'本机',u'哥',u'姐',u'母']:
                    count+=1
                    break
                if re.search(u'^(姨奶|表奶|姑奶|婆|阿姨|姨|兄|姐|妹|嫂)',contact.get("name")):
                    count+=1
                    break
        return count

    def smsOverdueArrearOrg7DaysCnt(self):
        """smsOverdueArrearOrg7DaysCnt 近7天短信命中逾期出现恶意欠款等的不同机构数"""
        smsList = self.mongo.query_sms_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_sms_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=30)
        if smsList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        total_smsoverdue_Org=[]
        sms_list=[]
        for sms in smsList:
            if (return_strfYmd_date(self.info.event_time_add8h)-return_strfYmd_date(datetime.datetime.utcfromtimestamp(int(sms.get("date"))/1000))).days<=6:
                sms_list.append(sms.get("smsBody").encode('UTF8'))
        for sms in sms_list:
            if re.search('严重逾期', sms) or re.search('恶意欠款', sms) or re.search('恶意拖欠', sms):
                if re.findall('\【(.*?)\】', sms):
                    total_smsoverdue_Org.append(re.findall('\【(.*?)\】', sms)[0])
        return len(list(set(total_smsoverdue_Org)))

    def smsOverdueArrearOrg3DaysCnt(self):
        """smsOverdueArrearOrg3DaysCnt 近3天短信命中逾期出现恶意欠款等的不同机构数"""
        smsList = self.mongo.query_sms_list_beforeEvenTime_inXdays(db='lake',
                                                                  collection="s_user_mobile_sms_list_{0}".format(int(self.info.user_id) % 4),
                                                                  serial_no=self.serial_no,
                                                                  find={"user_id": int(self.info.user_id)},
                                                                  days=30)
        if smsList=='No DATA':
            return self.SET_DEFAULT_VALUE_INT_9999999
        total_smsoverdue_Org=[]
        sms_list=[]
        for sms in smsList:
            if (return_strfYmd_date(self.info.event_time_add8h)-return_strfYmd_date(datetime.datetime.utcfromtimestamp(int(sms.get("date"))/1000))).days<=2:
                sms_list.append(sms.get("smsBody").encode('UTF8'))
        for sms in sms_list:
            if re.search('严重逾期', sms) or re.search('恶意欠款', sms) or re.search('恶意拖欠', sms):
                if re.findall('\【(.*?)\】', sms):
                    total_smsoverdue_Org.append(re.findall('\【(.*?)\】', sms)[0])
        return len(list(set(total_smsoverdue_Org)))

    def unitsNameIsNumber(self):
        """unitsNameIsNumber 单位名称是都是阿拉伯数字"""
        result = self.mysql.queryone_by_customer_id(db='customer_center',
                                                               sql="select * from work_info_%s where customer_id='%s'" % (
                                                                   self.info.customer_id % 20, self.info.customer_id))
        if not result or not result.get("units_name"):
            return self.SET_DEFAULT_VALUE_INT_9999996
        if re.findall('^\d+$',result.get("units_name")):
            return self.SET_DEFAULT_VALUE_INT_1
        return self.SET_DEFAULT_VALUE_INT_0


    def __get_contact_action_in_30days_lengthInXdays(self,days=0):
        total_call_inXdays_list=[]
        total_call_inXdays_call_time_list=[]
        results=self.mongo.query_all_by_userId_inXdays(db='lake',
                                              collection="s_user_mobile_contact_action_{0}".format(int(self.info.user_id) % 4),
                                              find={"user_id": int(self.info.user_id)},serial_no=self.serial_no,start_days=30, end_days=1,end_time="00:00:00")
        start_date = self.info.event_time - datetime.timedelta(days=days) + datetime.timedelta(hours=8)
        end_date = self.info.event_time + datetime.timedelta(hours=8)
        for row in results:
            for subrow in row.get('actions'):
                if days >0 and (subrow.get('callTime')<start_date or subrow.get('callTime')>end_date):
                    break
                if subrow.get('callTime') not in total_call_inXdays_call_time_list:
                    total_call_inXdays_list.append(subrow)
                    total_call_inXdays_call_time_list.append(subrow.get('callTime'))
        return total_call_inXdays_list

    def __get_call_night(self,call_list):
        cnt = 0
        for row in call_list:
            callTime_h = int((row.get('callTime') + datetime.timedelta(hours=8)).strftime('%H'))
            if callTime_h in (0,1,2,3,4,5,23):
                cnt += 1
        return cnt

    def __get_callin_cnt(self,call_list):
        call_in_cnt = 0
        for row in call_list:
            if int(row.get('callType')) == 1:
                call_in_cnt += 1
        return call_in_cnt


    def total_night_call_pro(self):
        """total_night_call_pro 23点 - 凌晨5点通话占比(取到的APP全部数据去重）（取到通话记录，匹配不到夜间通话, 夜间通话次数记为0）"""
        total_call_in30days_list = self.__get_contact_action_in_30days_lengthInXdays()
        if len(total_call_in30days_list) == 0:
            return -9999999
        return round(float(self.__get_call_night(total_call_in30days_list)) / len(total_call_in30days_list), 4)

    def month2_call_in_pro(self):
        """month2_call_in_pro 呼入次数占比(近2个月)（取到了通话记录，匹配不到呼入号码，呼入号码记为0）"""
        total_call_in30days_list = self.__get_contact_action_in_30days_lengthInXdays()
        if len(total_call_in30days_list) == 0:
            return -9999999
        total_call_in60days_list = self.__get_contact_action_in_30days_lengthInXdays(days=60)
        if len(total_call_in60days_list) == 0:
            return 0
        call_in_cnt = self.__get_callin_cnt(total_call_in60days_list)
        return round(float(call_in_cnt) / len(total_call_in60days_list), 4)

    def month3_night_call_pro(self):
        """month3_night_call_pro 23点 - 凌晨5点通话占比(近3个月)（取到通话记录，匹配不到夜间通话, 夜间通话次数记为0）"""
        total_call_in90days_list = self.__get_contact_action_in_30days_lengthInXdays(days=90)
        if len(total_call_in90days_list) == 0:
            return -9999999
        return round(float(self.__get_call_night(total_call_in90days_list)) / len(total_call_in90days_list), 4)

    def total_call_in_pro(self):
        """total_call_in_pro 呼入次数占比(取到的APP全部数据去重）（取到了通话记录，匹配不到呼入号码，呼入号码记为0）"""
        total_call_in30days_list=self.__get_contact_action_in_30days_lengthInXdays()
        if len(total_call_in30days_list)==0:
            return -9999999
        call_in_cnt=self.__get_callin_cnt(total_call_in30days_list)
        return round(float(call_in_cnt)/len(total_call_in30days_list),4)

    def __contact(self,type='total'):
        contact_results = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                                 collection="s_user_mobile_contact_{0}".format(
                                                                     int(self.info.user_id) % 4),
                                                                 find={"user_id": int(self.info.user_id)},
                                                                 serial_no=self.serial_no, start_days=29,
                                                                 start_time='00:00:00', end_days=1000)
        contact_list = []
        if not contact_results or len(contact_results) == 0:
            return -9999999
        contacts=[]
        for row in contact_results:
            contacts=contacts+row.get('contacts')
        contact_list=contact_list+self.info.get_mobilephone_list_by_contacts_dict_by_NameAndCleanedPhone(contacts=contacts,type='phone')
        if type=='total':
            if len(contact_list) > 0:
                return contact_list
            else:
                return 0
        contact_phone_list=self.info.get_mobilephone_list_after_cleaned_not_dict(contact_list)
        if type=='phone':
            if len(contact_phone_list)>0:
                return contact_phone_list
            else:
                return 0
        name_list = contact_list + self.info.get_mobilephone_list_by_contacts_dict_by_NameAndCleanedPhone(contacts=contacts,type='name')
        if type=='name':
            if len(contact_list) > 0:
                return name_list
            else:
                return 0

    def contactCnt(self):
        """contactCnt 通讯录条数"""
        contact_list = self.__contact(type='total')
        if contact_list==self.SET_DEFAULT_VALUE_INT_9999999 or  not contact_list:
            return self.SET_DEFAULT_VALUE_INT_9999999
        return len(contact_list)


    def ymRiskContactCnt(self):
        """ymRiskContactCnt 通讯录中有脉风险小贷个数"""
        result = self.mongo.query_by_user_id_180days(db='lake', collection="s_user_mobile_contact_{0}".format(self.info.user_id%4),
                                                   find={"user_id": self.user_id}, serial_no=self.serial_no)
        if result=='No DATA' or result==[]:
            return self.SET_DEFAULT_VALUE_INT_9999996
        contactlist=[]
        for contact in result:
            for con in contact.get("contacts"):
                if con not in contactlist:
                    contactlist.append(con)
        wordList=[]
        for word in self.contactWord:
            for contact in contactlist:
                if re.findall(r'%s'%word,contact.get("name")):
                    wordList.append(word)
        return len(list(set(wordList)))

    def ymRiskSmsCnt(self):
        """ymRiskSmsCnt 短信中有脉风险小贷个数"""
        result = self.mongo.query_sms_list_beforeEvenTime_inXdays(db='lake', collection="s_user_mobile_sms_list_{0}".format(self.info.user_id%4),
                                                   find={"user_id": self.user_id}, serial_no=self.serial_no,days=180)
        if result=='No DATA' or result==[]:
            return self.SET_DEFAULT_VALUE_INT_9999996
        wordList = []
        for word in self.contactWord:
            for sms in result:
                if re.findall(r'%s'%word,sms.get("smsBody")):
                    wordList.append(word)
        return len(list(set(wordList)))

    def ymRiskAppCnt(self):
        """ymRiskAppCnt applist中有脉风险小贷个数"""
        result = self.mongo.query_app_list_beforeEvenTime_inXdays(db='lake', collection="s_user_mobile_app_list_{0}".format(self.info.user_id%4),
                                                   find={"user_id": self.user_id}, serial_no=self.serial_no,days=180)
        if result=='No DATA' or result==[]:
            return self.SET_DEFAULT_VALUE_INT_9999996
        wordList = []
        for word in self.contactWord:
            for sms in result:
                if word==sms:
                    wordList.append(word)
        return len(list(set(wordList)))

    def gpsCountry(self):
        """gpsCountry gps定位国家"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        ips=[ip.get("location") for ip in result if (ip.get("create_at")+datetime.timedelta(hours=8))>(self.info.event_time_add8h-datetime.timedelta(hours=72))]
        ips=list(set(ips))
        location=[]
        for ip in ips:
            lng=ip.split(',')[0]
            lat=ip.split(',')[1]
            georesult = getPlaceFromGeo(lat, lng)
            location.append(georesult.get("result").get("addressComponent").get("country"))
        if not location:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location_only=list(set(location))
        location_only.sort()
        return ','.join(location_only)

    def gpsCountryNew(self):
        """gpsCountryNew 最新gps定位国家"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        if not result:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location=result[0].get("location")
        if location=='':
            return self.SET_DEFAULT_VALUE_INT_9999996
        lng=location.split(',')[0]
        lat=location.split(',')[1]
        georesult=getPlaceFromGeo(lat,lng)
        return georesult.get("result").get("addressComponent").get("country",self.SET_DEFAULT_VALUE_INT_9999996)

    def gpsProvince(self):
        """gpsProvince gps定位省份"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        ips=[ip.get("location") for ip in result if (ip.get("create_at")+datetime.timedelta(hours=8))>(self.info.event_time_add8h-datetime.timedelta(hours=72))]
        ips=list(set(ips))
        location=[]
        for ip in ips:
            lng=ip.split(',')[0]
            lat=ip.split(',')[1]
            georesult=getPlaceFromGeo(lat,lng)
            location.append(georesult.get("result").get("addressComponent").get("province").replace(u"省",""))
        if not location:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location_only=list(set(location))
        location_only.sort()
        return ','.join(location_only)

    def gpsProvinceNew(self):
        """gpsProvinceNew 最新gps定位省份"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        if not result:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location=result[0].get("location")
        if location=="":
            return self.SET_DEFAULT_VALUE_INT_9999996
        lng=location.split(',')[0]
        lat=location.split(',')[1]
        georesult=getPlaceFromGeo(lat,lng)
        return georesult.get("result").get("addressComponent").get("province",self.SET_DEFAULT_VALUE_INT_9999996).replace(u"省","").replace(u"市","").replace(u"特别行政区","").replace(u"壮族自治区","").replace(u"回族自治区","").replace(u"维吾尔自治区","").replace(u"自治区","")

    def ifLocal(self):
        """ifLocal 是否本地户籍"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        ips=[ip.get("location") for ip in result if (ip.get("create_at")+datetime.timedelta(hours=8))>(self.info.event_time_add8h-datetime.timedelta(days=180))]
        location=[]
        for ip in ips:
            lng=ip.split(',')[0]
            lat=ip.split(',')[1]
            georesult=getPlaceFromGeo(lat,lng)
            location.append(georesult.get("result").get("addressComponent").get("city"))
        if not location:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location_sort=list(set(location))
        location_dict={}
        for loc in location_sort:
            location_dict[loc]=location.count(loc)
        location_dict_sort=sorted(location_dict.items(), key=lambda item: item[1],reverse=True)
        result = self.mysql.queryone_by_customer_id_sxj(db='skynet',sql="select city from dict_idcard_location where code = %s" %str(self.info.cert_id)[:6])
        dateResult=result.get('city')
        value=location_dict_sort[0][1]
        location_only=[loc[0] for loc in location_dict_sort if loc[1]==value]
        for only in location_only:
            if only.replace(u'市','') in dateResult:
                return self.SET_DEFAULT_VALUE_INT_1
        return self.SET_DEFAULT_VALUE_INT_0

    def gpsProvinceMost(self):
        """gpsProvinceMost 客户所在省份"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        ips=[ip.get("location") for ip in result if (ip.get("create_at")+datetime.timedelta(hours=8))>(self.info.event_time_add8h-datetime.timedelta(days=180))]
        location=[]
        for ip in ips:
            lng=ip.split(',')[0]
            lat=ip.split(',')[1]
            georesult=getPlaceFromGeo(lat,lng)
            location.append(georesult.get("result").get("addressComponent").get("province").replace(u"省",""))
        if not location:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location_sort=list(set(location))
        location_dict={}
        for loc in location_sort:
            location_dict[loc]=location.count(loc)
        location_dict_sort=sorted(location_dict.items(), key=lambda item: item[1],reverse=True)
        value=location_dict_sort[0][1]
        location_only=[loc[0].replace(u"市","") for loc in location_dict_sort if loc[1]==value]
        location_only.sort()
        return ','.join(location_only)

    def gpsCityMost(self):
        """gpsCityMost 客户所在城市"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        ips=[ip.get("location") for ip in result if (ip.get("create_at")+datetime.timedelta(hours=8))>(self.info.event_time_add8h-datetime.timedelta(days=180))]
        location=[]
        for ip in ips:
            lng=ip.split(',')[0]
            lat=ip.split(',')[1]
            georesult=getPlaceFromGeo(lat,lng)
            location.append(georesult.get("result").get("addressComponent").get("city").replace(u"市",""))
        if not location:
            return self.SET_DEFAULT_VALUE_INT_9999999
        location_sort=list(set(location))
        location_dict={}
        for loc in location_sort:
            location_dict[loc]=location.count(loc)
        location_dict_sort=sorted(location_dict.items(), key=lambda item: item[1],reverse=True)
        value=location_dict_sort[0][1]
        location_only=[loc[0] for loc in location_dict_sort if loc[1]==value]
        location_only.sort()
        return ','.join(location_only)

    def riskLocationMindistance(self):
        """riskLocationMindistance 客户location与综合名单库的location的最短距离"""
        result=self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id%4),find={"user_id":self.info.user_id})
        ips=[ip.get("location") for ip in result if (ip.get("create_at")+datetime.timedelta(hours=8))>(self.info.event_time_add8h-datetime.timedelta(hours=24))]
        mongo_result=self.mongo.query_by_user_id(db='rota',collection='rota_gps',find={})
        ips_20=ips[:20]
        diff=[]
        for ip in ips_20:
            for rota_ip in mongo_result:
                diff.append(int(haversine(float(ip.split(',')[1]), float(ip.split(',')[0]), float(rota_ip.get("numberValue").split(',')[1].replace(' ','')), float(rota_ip.get("numberValue").split(',')[0].replace(' ','')))))
        return min(diff)

    def location24hUseridCnt(self):
        """location24hUseridCnt 客户location在24h内出现的客户数"""
        result = self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id % 4),find={"user_id": self.info.user_id})
        ips = [re.findall('\d+\.\d{,3}', ip.get("location")) for ip in result if(ip.get("create_at") + datetime.timedelta(hours=8)) > (self.info.event_time_add8h - datetime.timedelta(hours=24))]
        print ips
        #TODO 看预计算的数据，计算整3天

    def location3dUseridCnt(self):
        """location3dUseridCnt 客户location在3天内出现的客户数"""
        result = self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id % 4),find={"user_id": self.info.user_id})
        ips = [re.findall('\d+\.\d{,3}', ip.get("location")) for ip in result if(ip.get("create_at") + datetime.timedelta(hours=8)) > (self.info.event_time_add8h - datetime.timedelta(days=2))]
        print ips
        #TODO 看预计算的数据，计算整3天

    def location7dUseridCnt(self):
        """location7dUseridCnt 客户location在7天内出现的客户数"""
        result = self.mongo.query_by_user_id(db='lake',collection='s_user_mobile_device_info_{0}'.format(self.info.user_id % 4),find={"user_id": self.info.user_id})
        ips = [re.findall('\d+\.\d{,3}', ip.get("location")) for ip in result if(ip.get("create_at") + datetime.timedelta(hours=8)) > (self.info.event_time_add8h - datetime.timedelta(days=6))]
        print ips
        #TODO 看预计算的数据，计算整3天

    def smsXjd7Dayscnt(self):
        """smsXjd7Dayscnt 近7天短信中不同现金贷机构的数量"""
        sms_list = []
        result=self.mongo.query_all_by_userId_inXdays(db='lake',
                                                      collection='s_user_mobile_sms_list_{0}'.format(int(self.info.user_id)%4),
                                                      serial_no=self.serial_no,find={"user_id":int(self.info.user_id)},
                                                      start_days=90,
                                                      start_time="00:00:00"
                                                      )
        for row in result:
            for sub_row in row.get('mobileSms'):
                if sub_row not in self.sms_list:
                    sms_list.append(sub_row)
        if not sms_list:
            return self.SET_DEFAULT_VALUE_INT_9999999
        event_time=self.info.event_time_add8h
        event_time_before2 = datetime.datetime.strptime(str(event_time-datetime.timedelta(days=6))[0:10] +' '+'00:00:00', "%Y-%m-%d %H:%M:%S")
        total_smsoverdue_Org = []
        for row in sms_list:
            sms_date = datetime.datetime.utcfromtimestamp(int(row.get('date')) / 1000)
            if event_time_before2 <= sms_date :
                smsbody = row.get('smsBody').encode('UTF8')
                for match_row in self.new_match_list:
                    if re.search('\【.*?\】', smsbody):
                        if re.search(match_row, re.findall('\【(.*?)\】', smsbody)[0]):
                            total_smsoverdue_Org.append(re.findall('\【(.*?)\】', smsbody)[0])
                            break
        return len(set(total_smsoverdue_Org))

    def smsXjd30Dayscnt(self):
        """smsXjd30Dayscnt 近30天短信中不同现金贷机构的数量"""
        sms_list = []
        result=self.mongo.query_all_by_userId_inXdays(db='lake',
                                                      collection='s_user_mobile_sms_list_{0}'.format(int(self.info.user_id)%4),
                                                      serial_no=self.serial_no,
                                                      find={"user_id":int(self.info.user_id)},
                                                      start_days=90,
                                                      start_time="00:00:00"
                                                      )
        for row in result:
            for sub_row in row.get('mobileSms'):
                if sub_row not in self.sms_list:
                    sms_list.append(sub_row)
        if not sms_list:
            return self.SET_DEFAULT_VALUE_INT_9999999
        event_time=self.info.event_time_add8h
        event_time_before2 = datetime.datetime.strptime(str(event_time-datetime.timedelta(days=29))[0:10] +' '+'00:00:00', "%Y-%m-%d %H:%M:%S")
        total_smsoverdue_Org = []
        for row in sms_list:
            sms_date = datetime.datetime.utcfromtimestamp(int(row.get('date')) / 1000)
            if event_time_before2 <= sms_date :
                smsbody = row.get('smsBody').encode('UTF8')
                for match_row in self.new_match_list:
                    if re.search('\【.*?\】', smsbody):
                        if re.search(match_row, re.findall('\【(.*?)\】', smsbody)[0]):
                            total_smsoverdue_Org.append(re.findall('\【(.*?)\】', smsbody)[0])
                            break
        return len(set(total_smsoverdue_Org))

    def appXjd7Dayscnt(self):
        """appXjd7Dayscnt 近7天app中不同现金贷机构的数量"""
        list_app =[]
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_app_list_{0}".format(int(self.info.user_id) % 4),
                                                        serial_no=self.serial_no,
                                                        find={"user_id": int(self.info.user_id)},
                                                        start_days=6,
                                                        start_time="00:00:00")
        if not result:
            return self.SET_DEFAULT_VALUE_INT_9999999
        for data in result:
            for app in data.get('mobileApp'):
                list_app.append(app.get('appName'))
        total_appList_keyWord = []
        for app in list_app:
            for rec in self.keyword_app_list:
                if rec in app:
                    total_appList_keyWord.append(app)
                    break
        return len(list(set(total_appList_keyWord)))

    def appXjd30Dayscnt(self):
        """appXjd30Dayscnt 近30天app中不同现金贷机构的数量"""
        list_app =[]
        result = self.mongo.query_all_by_userId_inXdays(db='lake',
                                                        collection="s_user_mobile_app_list_{0}".format(int(self.info.user_id) % 4),
                                                        serial_no=self.serial_no,
                                                        find={"user_id": int(self.info.user_id)},
                                                        start_days=29,
                                                        start_time="00:00:00")
        if not result:
            return self.SET_DEFAULT_VALUE_INT_9999999
        for data in result:
            for app in data.get('mobileApp'):
                list_app.append(app.get('appName'))
        total_appList_keyWord = []
        for app in list_app:
            for rec in self.keyword_app_list:
                if rec in app:
                    total_appList_keyWord.append(app)
                    break
        return len(list(set(total_appList_keyWord)))

if __name__ == "__main__":
    env = 'T1'
    serial_no_list = '1545381235108-C88E8DD4A1C06CDE0C62D42D9D8DA1DD'
    test = LakeFactor(env, serial_no_list)
    print test.gpsProvince()